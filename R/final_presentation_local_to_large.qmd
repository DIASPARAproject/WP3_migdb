---
title: "From local to large scale: a habitat database alongside a dam and an electrofishing database to shift from continental habitats to population or panpopulation scales"
author: "Cédric Briand, Jules Oliviéro, Jani Helminen"
fontsize: 20pt
filters:
  - quarto-kroki
  - speakernotes
title-slide-attributes:
  data-background-image: images/diaspara_background.png
  data-background-size: stretch
  data-background-opacity: "0.5"
logo: images/diaspara_participants_logo_withEUlogo.png
footer: ""
format: 
  revealjs :
    self-contained: true
  pdf:
    speakernotes:
      displayNotes: true
      customStyle: |
        roundcorner=5pt,
        subtitlebelowline=true,
        subtitleaboveline=true,
        subtitlebackgroundcolor=yellow!70!white,
        backgroundcolor=blue!20!white,
        frametitle={Theorem},
        frametitlerule=true,
        frametitlebackgroundcolor=yellow!70!white,
theme: solarized
background-transition: fade
editor: visual
---
```{r init}
#| echo: FALSE
#| warning: FALSE
#| message: FALSE
#| results: 'hide'
if(Sys.info()[["user"]] == 'joliviero'){
  setwd("D:/workspace/DIASPARA_WP3_migdb/R")
  datawd <- "D:/DIASPARA/wgbast"
} else if (Sys.info()[["user"]] == 'cedric.briand'){
  setwd("C:/workspace/DIASPARA_WP3_migdb/R")
  datawd <- "C:/Users/cedric.briand/OneDrive - EPTB Eaux&Vilaine/Projets/DIASPARA/wgbast"
}
source("utilities/load_library.R")
load_library("tidyverse")
load_library("RPostgres")
load_library("yaml")
load_library("DBI")
load_library("ggplot2")
load_library("sf")
load_library("janitor") #
load_library("htmltools") 
load_library("leaflet")
cred <- read_yaml("../credentials.yml")
con_diaspara <- dbConnect(Postgres(), 
                          dbname = cred$dbnamediaspara,
                          host = cred$hostdistant,
                          port = cred$port,
                          user = cred$userdiaspara,
                          password = cred$passworddiaspara)





```


## This presentation

::::: columns
::: {.column .incremental width="40%"}
![](images/clipboard-550275409.png "Eel and brown trout"){width="370"} ![](images/clipboard-639830824.png "electrofishing"){width="370"}
:::

::: {.column width="60%"}
[**Database development and:**]{style="font-size:45px"}

-   [**Regional and Global (Spatial) Models**]{style="font-size:40px"}

-   [**Migration obstacles and Electrofishing**]{style="font-size:40px"}

-   [**Biological and Biometric data**]{style="font-size:40px"}

-   [**Overall - Whole Stock**]{style="font-size:40px"}
:::
:::::

## This presentation

::::: columns
::: {.column .incremental width="40%"}
![](images/clipboard-550275409.png "Eel and brown trout"){width="370"} ![](images/clipboard-639830824.png "electrofishing"){width="370"}
:::

::: {.column width="60%"}
-   [**Regional and Global (Spatial) Models**]{style="font-size:45px"}

A big reason why we needed habitat database
:::
:::::

# Taking different regions into account

**Remember from previous presentations:**

![](images/clipboard-1502028863.png)

# What amazing species! What a scientific challenge!

**Remember from previous presentations:**

-   Nested dynamics: pooled marine phase, independent continental phase
-   Local pressures can have consequences at larger scale
    -   Management is often local: consequences at larger scale
    -   Assessment of management actions
-   Large scale pressure can impact local dynamics (e.g. marine fisheries)

# The spatial / habitat model?

::::: columns
::: {.column .incremental width="50%"}
-   Regional aspects in WGBAST, WGNAS and WGBAST
-   WGTRUTTA https://diaspara.bordeaux-aquitaine.inrae.fr/deliverables/wp3/p6/wgtrutta_database_description.html
:::

::: {.column width="50%"}
![](images/clipboard-1441936957.png)
:::
:::::

# Scale of each model? Not known

::::: columns
::: {.column .incremental width="50%"}
-   In the past, only marine habitat available -\> now marine and continental
-   With this approach we can test different structures and levels
-   Data to collected locally, used in (m)any needed scale
:::

::: {.column width="50%"}
![](images/clipboard-3523976769.png)
:::
:::::

# Habitat DB to move from local to higher scale

-   Data structured in regional level for SAM
-   Need upscaling: need upscaling methods
-   Identify similar areas, identify different areas

# What is the appropriate spatial scale? Not known yet? MERGE THIS ONE AND THREE OF THE SAME

-   All have the structure to group things at regional level

![](images/clipboard-3102186189.png)

# INTRODUCE THE NEED FOR REGIONAL MODELS

-   Examples from (Hilaire presentation) from EDA
-   How are we going to do it: we need hydro and DAM and EF
-   Give an example of regional model EDA
-   Explain the need to have habitat models everywhere
-   Show that we need to quantify mortality linked with dams (downstream migration)
- WG TRUTTA work

(Jani reorder this as you want, I just put everything
related to introduction in the same place. I think you'll need several slides, I'll try to find some nice pictures)

## Habitat DB hierarchical structure
![WGBAST Hierarchical structure](images/fig-area_hierarchy_bast.svg){#fig-hierbast}

## Habitat DB hierarchical structure : Stock
![WGBAST Stock level](images/fig-area_hierarchy_bast_stock.svg){#fig-hierbastsck}

## Habitat DB hierarchical structure : Stock
```{r}
#| label: refbast.tr_area_are Stock level
#| echo: FALSE
#| warning: FALSE
#| message: FALSE
#| tbl-cap: Structure of the global Stock level in the referential table


fstock_lvl <- dbGetQuery(con_diaspara, 
  "SELECT are_id, are_are_id, are_code, are_lev_code, are_wkg_code, are_ismarine FROM refbast.tr_area_are
  WHERE are_lev_code = 'Stock'
  ORDER BY are_id;")

DT::datatable(fstock_lvl,
rownames = FALSE,
  options = list(
    pageLength = 7,        
    scrollX= TRUE   
  )
) |>
  htmltools::tagList(

 
    htmltools::tags$style(HTML("
      /* Table cells */
      table.dataTable td {
        font-size: 0.6em;
      }
 
      /* Table headers */
      table.dataTable th {
        font-size: 0.65em;
      }
 
      /* Control bar: search input, pagination, etc. */
      .dataTables_wrapper .dataTables_filter,
      .dataTables_wrapper .dataTables_length,
      .dataTables_wrapper .dataTables_info,
      .dataTables_wrapper .dataTables_paginate {
        font-size: 0.70em;
      }
    ")))

```
## Habitat DB hierarchical structure : Stock
![](images/bast_stock.png "WGBAST Stock level")

## Habitat DB hierarchical structure : Assessment_unit
![WGBAST Assesment_unit level](images/fig-area_hierarchy_bast_au.svg){#fig-hierbastau}

## Habitat DB hierarchical structure : Assessment_unit
```{r}
#| label: refbast.tr_area_are assessment unit level
#| echo: FALSE
#| warning: FALSE
#| message: FALSE
#| tbl-cap: Structure of the assessment unit level in the referential table


fstock_lvl <- dbGetQuery(con_diaspara, 
  "SELECT are_id, are_are_id, are_code, are_lev_code, are_wkg_code, are_ismarine FROM refbast.tr_area_are
  WHERE are_id = ANY(ARRAY[1,3]) OR are_lev_code = 'Assessment_unit' 
  ORDER BY are_id;")

DT::datatable(fstock_lvl,
rownames = FALSE,
  options = list(
    pageLength = 7,        
    scrollX= TRUE   
  )
) |>
  htmltools::tagList(

 
    htmltools::tags$style(HTML("
      /* Table cells */
      table.dataTable td {
        font-size: 0.6em;
      }
 
      /* Table headers */
      table.dataTable th {
        font-size: 0.65em;
      }
 
      /* Control bar: search input, pagination, etc. */
      .dataTables_wrapper .dataTables_filter,
      .dataTables_wrapper .dataTables_length,
      .dataTables_wrapper .dataTables_info,
      .dataTables_wrapper .dataTables_paginate {
        font-size: 0.70em;
      }
    ")))

#knitr::kable(fstock_lvl) %>% kable_styling(bootstrap_options = c("striped", "hover", "condensed"))

```

## Habitat DB hierarchical structure : Assessment_unit
![](images/bast_au.png "WGBAST Assessment_unit level")

## Habitat DB hierarchical structure : River
![WGBAST River level](images/fig-area_hierarchy_bast_riv.svg){#fig-hierbastriv}

## Habitat DB hierarchical structure : River
```{r}
#| label: refbast.tr_area_are main river level
#| echo: FALSE
#| warning: FALSE
#| message: FALSE
#| tbl-cap: Structure of the main river level in the referential table


fstock_lvl <- dbGetQuery(con_diaspara, 
  "SELECT are_id, are_are_id, are_code, are_lev_code, are_wkg_code, are_ismarine, are_name FROM refbast.tr_area_are
  WHERE are_id = ANY(ARRAY[1,3,13]) OR are_are_id = 13
  ORDER BY are_id;")

DT::datatable(fstock_lvl,
rownames = FALSE,
  options = list(
    pageLength = 7,        
    scrollX= TRUE   
  )
) |>
  htmltools::tagList(

 
    htmltools::tags$style(HTML("
      /* Table cells */
      table.dataTable td {
        font-size: 0.6em;
      }
 
      /* Table headers */
      table.dataTable th {
        font-size: 0.65em;
      }
 
      /* Control bar: search input, pagination, etc. */
      .dataTables_wrapper .dataTables_filter,
      .dataTables_wrapper .dataTables_length,
      .dataTables_wrapper .dataTables_info,
      .dataTables_wrapper .dataTables_paginate {
        font-size: 0.70em;
      }
    ")))

#knitr::kable(fstock_lvl) %>% kable_styling(bootstrap_options = c("striped", "hover", "condensed"))

```

## Habitat DB hierarchical structure : River
![](images/bast_river.png "WGBAST River level")

## Habitat DB hierarchical structure : River_section
![WGBAST River_section level](images/fig-area_hierarchy_bast_rivsec.svg){#fig-hierbastrvsc}

## Habitat DB hierarchical structure : River_section
```{r}
#| label: refbast.tr_area_are main river_section level
#| echo: FALSE
#| warning: FALSE
#| message: FALSE
#| tbl-cap: Structure of the main river level in the referential table


fstock_lvl <- dbGetQuery(con_diaspara, 
  "SELECT are_id, are_are_id, are_code, are_lev_code, are_wkg_code, are_ismarine, are_name FROM refbast.tr_area_are
  WHERE are_id = ANY(ARRAY[1,3,13,19]) OR are_are_id = 19
  ORDER BY are_id;")

DT::datatable(fstock_lvl,
rownames = FALSE,
  options = list(
    pageLength = 7,        
    scrollX= TRUE   
  )
) |>
  htmltools::tagList(

 
    htmltools::tags$style(HTML("
      /* Table cells */
      table.dataTable td {
        font-size: 0.6em;
      }
 
      /* Table headers */
      table.dataTable th {
        font-size: 0.65em;
      }
 
      /* Control bar: search input, pagination, etc. */
      .dataTables_wrapper .dataTables_filter,
      .dataTables_wrapper .dataTables_length,
      .dataTables_wrapper .dataTables_info,
      .dataTables_wrapper .dataTables_paginate {
        font-size: 0.70em;
      }
    ")))

#knitr::kable(fstock_lvl) %>% kable_styling(bootstrap_options = c("striped", "hover", "condensed"))

```

## Habitat DB hierarchical structure : River_section
![](images/bast_rs.png "WGBAST River_section level")

## Habitat DB hierarchical structure : Divison
![WGBAST Division level](images/fig-area_hierarchy_bast_div.svg){#fig-hierbastdiv}

## Habitat DB hierarchical structure : Divison
```{r}
#| label: refbast.tr_area_are ICES division level
#| echo: FALSE
#| warning: FALSE
#| message: FALSE
#| tbl-cap: Structure of the ICES division level in the referential table


fstock_lvl <- dbGetQuery(con_diaspara, 
  "SELECT are_id, are_are_id, are_code, are_lev_code, are_wkg_code, are_ismarine FROM refbast.tr_area_are
  WHERE are_id = ANY(ARRAY[1,2]) OR are_lev_code = 'Division'
  ORDER BY are_id;")

DT::datatable(fstock_lvl,
rownames = FALSE,
  options = list(
    pageLength = 7,        
    scrollX= TRUE   
  )
) |>
  htmltools::tagList(

 
    htmltools::tags$style(HTML("
      /* Table cells */
      table.dataTable td {
        font-size: 0.6em;
      }
 
      /* Table headers */
      table.dataTable th {
        font-size: 0.65em;
      }
 
      /* Control bar: search input, pagination, etc. */
      .dataTables_wrapper .dataTables_filter,
      .dataTables_wrapper .dataTables_length,
      .dataTables_wrapper .dataTables_info,
      .dataTables_wrapper .dataTables_paginate {
        font-size: 0.70em;
      }
    ")))

```

## Habitat DB hierarchical structure : Divison
![](images/bast_div.png "WGBAST Division level")

## Habitat DB hierarchical structure : Subdivision_grouping
![WGBAST Subdivision_grouping level](images/fig-area_hierarchy_bast_subgrp.svg){#fig-hierbastsubgr}

## Habitat DB hierarchical structure : Subdivision_grouping
```{r}
#| label: refbast.tr_area_are ICES subdivision_grouping level
#| echo: FALSE
#| warning: FALSE
#| message: FALSE
#| tbl-cap: Structure of the ICES subdivision grouping level in the referential table


fstock_lvl <- dbGetQuery(con_diaspara, 
  "SELECT are_id, are_are_id, are_code, are_lev_code, are_wkg_code, are_ismarine FROM refbast.tr_area_are
  WHERE are_id = ANY(ARRAY[1,2,7011]) OR are_lev_code = 'Subdivision_grouping'
  ORDER BY are_id;")

DT::datatable(fstock_lvl,
rownames = FALSE,
  options = list(
    pageLength = 7,        
    scrollX= TRUE   
  )
) |>
  htmltools::tagList(

 
    htmltools::tags$style(HTML("
      /* Table cells */
      table.dataTable td {
        font-size: 0.6em;
      }
 
      /* Table headers */
      table.dataTable th {
        font-size: 0.65em;
      }
 
      /* Control bar: search input, pagination, etc. */
      .dataTables_wrapper .dataTables_filter,
      .dataTables_wrapper .dataTables_length,
      .dataTables_wrapper .dataTables_info,
      .dataTables_wrapper .dataTables_paginate {
        font-size: 0.70em;
      }
    ")))

#knitr::kable(fstock_lvl) %>% kable_styling(bootstrap_options = c("striped", "hover", "condensed"))

```

## Habitat DB hierarchical structure : Subdivision_grouping
![](images/bast_subgr.png "WGBAST Subdivision_grouping level")

## Habitat DB hierarchical structure : Subdivision
![WGBAST Subdivision level](images/fig-area_hierarchy_bast_subdiv.svg){#fig-hierbastsub}

## Habitat DB hierarchical structure : Subdivision
```{r}
#| label: refbast.tr_area_are ICES subdivision level
#| echo: FALSE
#| warning: FALSE
#| message: FALSE
#| tbl-cap: Structure of the ICES subdivision level in the referential table


fstock_lvl <- dbGetQuery(con_diaspara, 
  "SELECT are_id, are_are_id, are_code, are_lev_code, are_wkg_code, are_ismarine FROM refbast.tr_area_are
  WHERE are_id = ANY(ARRAY[1,2]) OR are_lev_code = ANY(ARRAY['Division', 'Subdivision'])
  ORDER BY are_id;")

# DT::datatable(fstock_lvl,
#                 rownames = FALSE, 
#                 class = "stripe hover compact", 
#                 options = list(dom = 't',
#                           pageLength = 100))

DT::datatable(fstock_lvl,
rownames = FALSE,
  options = list(
    pageLength = 7,        
    scrollX= TRUE   
  )
) |>
  htmltools::tagList(

 
    htmltools::tags$style(HTML("
      /* Table cells */
      table.dataTable td {
        font-size: 0.6em;
      }
 
      /* Table headers */
      table.dataTable th {
        font-size: 0.65em;
      }
 
      /* Control bar: search input, pagination, etc. */
      .dataTables_wrapper .dataTables_filter,
      .dataTables_wrapper .dataTables_length,
      .dataTables_wrapper .dataTables_info,
      .dataTables_wrapper .dataTables_paginate {
        font-size: 0.70em;
      }
    ")))

#knitr::kable(fstock_lvl) %>% kable_styling(bootstrap_options = c("striped", "hover", "condensed"))

```



## Habitat DB hierarchical structure : Subdivision
![](images/bast_sub.png "WGBAST Subdivision level")

## Habitat DB hierarchical structure : WGEEL
![WGEEL Hierarchical structure](images/fig-area_hierarchy_wgeel.svg){#fig-hiereel}

## Habitat DB hierarchical structure : Regional
- EMUs are to be deprecated
- Creating a new structure to assess data

## Habitat DB hierarchical structure : Regional
![](images/wgeel_baltic.png "WGEEL Regional level")

## Habitat DB hierarchical structure : Regional
![](images/wgeel_norway.png "WGEEL Regional level")

## Habitat DB hierarchical structure : Regional
![](images/wgeel_nsea.png "WGEEL Regional level")

## Habitat DB hierarchical structure : Regional
![](images/wgeel_atlantic.png "WGEEL Regional level")

## Habitat DB hierarchical structure : Regional
![](images/wgeel_med.png "WGEEL Regional level")

## Habitat DB hierarchical structure : Complex
- Taking care of lagoons in the Mediterranean
- Creating groups of lagoons
- Available for Spain, France, Tunisia, Italia, Albania, Greece and Turkey

## Habitat DB hierarchical structure : Complex
![](images/greece_complex.png "WGEEL Regional level")

## Habitat DB hierarchical structure : Complex
![](images/french_complex.png "WGEEL Regional level")

## Habitat DB hierarchical structure : WGNAS
![WGNAS Hierarchical structure](images/fig-area_hierarchy_nas1.svg){#fig-hiernas}

## Habitat DB hierarchical structure : Assessment_unit
![](images/nas_aunit.png "WGNAS AU level")

## Habitat DB hierarchical structure : River
![](images/nas_riv.png "WGNAS River level")

## Habitat DB hierarchical structure : River
- Possibility to group river basins to create smaller assessment units

# Habitat DB to move from local to higher scale

-   Data structured in regional level for SAM
-   Need upscaling: need upscaling methods
-   Identify similar areas, identify different areas

# What is the appropriate spatial scale? Not known yet?

-   All have the structure to group things at regional level

# Introduction about how we want to develop spatial model in EDA

-   We need to do it, use EDA


# Different pressures, quantification issues?

-   Obstacles, turbines matched to habitat
-   E.g., WGTRUTTA work

# DAM DATABASE


::::: columns
::: {.column width="50%"}
```{mermaid}
%%| fig-cap: Simplied structure of the dam database
flowchart TB
    A([Obstruction place]):::table
    %% Short Path
    A --> B([Obstruction]):::table
    B -->|Upstream| F([fish passage]):::table
    B -->|Downstream| C([Hydro Power Plant]):::table
    C --> D([Turbine]):::table    
    classDef table fill:#CD88
    classDef main fill:#268073,color:white
```
:::

::: {.column width="50%"}
![](images/dam_spain.jpg)
:::
:::::


## DAM DATABASE : Obstruction place

::::: columns
::: {.column width="50%"}
```{mermaid}
%%| fig-cap: Simplied structure of the dam database
flowchart TB
    A([Obstruction place]):::main
    %% Short Path
    A --> B([Obstruction]):::table
    B -->|Upstream| F([fish passage]):::table
    B -->|Downstream| C([Hydro Power Plant]):::table
    C --> D([Turbine]):::table    
    classDef table fill:#CD88
    classDef main fill:#268073,color:white
```
:::

::: {.column width="50%"}
- Obstruction place is a point on the map
- It has a hierarchy (dam related to other dams in braided network)
- It belongs to a country (by inheritance), so dam data are filled in
and replaced at the national level
- Class following AMBER + sudoang
```{mermaid}

flowchart TB
    A([Obstruction place]):::table
    %% Short Path
    A --> B([Obstuction place FR]):::table
    A --> C([Obstuction place ES]):::table 
    A --> D([Obstuction place ...]):::table      
    classDef table fill:#CD88
    classDef main fill:#268073,color:white
```
:::
:::::

## DAM DATABASE : Obstruction place

```{r}
#| label: tbl-obstruction_place
#| echo: FALSE
#| eval: TRUE
#| warning: FALSE
#| html-table-processing: none


# dam <-dbGetQuery(con_diaspara, "SELECT 
# op_placename,
# op_op_id,
# op_id_original,
# op_country
#  FROM dam_france.obstruction_place limit 500;")

# save(dam, file="data/presentation_dam_op.Rdata")
load(file="data/presentation_dam_op.Rdata")

 dam |> 
 DT::datatable(rownames = FALSE,
  options = list(
    pageLength = 7,        
    scrollX= TRUE   
  )
) |>
  htmltools::tagList(
   

    tags$style(HTML("
      /* Table cells */
      table.dataTable td {
        font-size: 0.6em;
      }

      /* Table headers */
      table.dataTable th {
        font-size: 0.65em;
      }

      /* Control bar: search input, pagination, etc. */
      .dataTables_wrapper .dataTables_filter,
      .dataTables_wrapper .dataTables_length,
      .dataTables_wrapper .dataTables_info,
      .dataTables_wrapper .dataTables_paginate {
        font-size: 0.70em;
      }
    "))

  )

```


## DAM DATABASE : Obstruction place

```{r}
#| label: fig-obstruction_place
#| echo: FALSE
#| eval: TRUE
#| warning: FALSE
#| fig-cap: "A subsample of the dam database in France"

# query <- "SELECT op_id_original,
#                  op_placename, 
#                  ob_height, 
#                  ot.no_code as type,                 
#                  geom 
#           FROM dam_france.obstruction_place op
#           JOIN dam_france.obstruction o
#              ON ob_op_id = op_id
#           JOIN nomenclature.obstruction_type ot
#              ON ob_obstruction_type_no_id = ot.no_id
#           JOIN refeel.tr_area_are are ON 
#           st_intersects(st_transform(op.geom, 4326), are.geom_polygon)
#           WHERE are_code = 'FR_Bret'
#           AND ob_ending_date = '2035-01-01'
#           "
# query2 <- "SELECT are1.are_id, are1.geom_line FROM refnas.tr_area_are are1 
#           JOIN refeel.tr_area_are are2 ON 
#           st_intersects(are1.geom_line, are2.geom_polygon)
#           WHERE are2.are_code = 'FR_Bret'
#           AND  are1.are_lev_code = 'River_section'"


# layer <- st_read(dsn = con_diaspara, query = query) |> 
#          sf::st_transform(4326) 
# layer_riv <- st_read(dsn = con_diaspara, query = query2) 



# save(layer, layer_riv, file = "data/dammap_presentation.Rdata")
load(file = "data/dammap_presentation.Rdata")
layer <- layer |>
          mutate(label = sprintf(
            '%s <br>	
             code: %s <br>
             type: %s <br>				
					   h: %1.2f,<br> ',
            stringi::stri_trans_general(layer$op_placename, "latin-ascii"),
            layer$op_id_original,
            layer$type,            
            layer$ob_height
          )) 
layer$size <-  1+log(layer$ob_height+1) #  range 1-13
layer$size[is.na(layer$size)] <- 0.01
layer$type[is.na(layer$type)]<-"NA"
layer$type <- as.factor(layer$type)
cols <- RColorBrewer::brewer.pal(length(levels(layer$type)),name ="Set1")
colorfun <- leaflet::colorFactor(cols, layer$type)


l <- leaflet::leaflet() |>
     leaflet::addPolylines(data= layer_riv, 
     opacity=0.5,
     fillOpacity = 0.2
     ) |>
     leaflet::addScaleBar(options = leaflet::scaleBarOptions(imperial = FALSE)) |>
     leaflet::addProviderTiles(leaflet::providers$CartoDB.DarkMatter) |>
     leaflet::addCircleMarkers(
        data = layer[1:500,],
        popup = ~label,
        color = ~colorfun(type),       
        radius = ~size       
      ) |>
      leaflet::addLegend(
        position="topright",
        colors = cols,
        labels = levels(layer$type),
        opacity = 1)
    
l

```

## DAM DATABASE : Physical obstruction

::::: columns
::: {.column width="50%"}
```{mermaid}
%%| fig-cap: Simplied structure of the dam database
flowchart TB
    A([Obstruction place]):::table
    %% Short Path
    A --> B([Obstruction]):::main
    B -->|Upstream| F([fish passage]):::table
    B -->|Downstream| C([Hydro Power Plant]):::table
    C --> D([Turbine]):::table    
    classDef table fill:#CD88
    classDef main fill:#268073,color:white
```
:::

::: {.column width="50%"}
- Physical obstruction has date of start and end
- Events (Erasement, change of height change dam period)
- Fishway types
- Downstream water depth
:::
:::::

## DAM DATABASE : Physical obstruction

```{r}
#| label: tbl-obstruction
#| echo: FALSE
#| eval: TRUE
#| warning: FALSE
#| html-table-processing: none


# dam_ob <-dbGetQuery(con_diaspara, "SELECT 
# * FROM dam_france.obstruction limit 100;")

# save(dam_ob, file="data/presentation_dam_ob.Rdata")
load(file="data/presentation_dam_ob.Rdata")

 dam_ob |> 
 DT::datatable(rownames = FALSE,
  options = list(
    pageLength = 5,        
    scrollX= TRUE   
  )
)|>
  htmltools::tagList(
   

     htmltools::tags$style(HTML("
      /* Table cells */
      table.dataTable td {
        font-size: 0.6em;
      }

      /* Table headers */
      table.dataTable th {
        font-size: 0.65em;
      }

      /* Control bar: search input, pagination, etc. */
      .dataTables_wrapper .dataTables_filter,
      .dataTables_wrapper .dataTables_length,
      .dataTables_wrapper .dataTables_info,
      .dataTables_wrapper .dataTables_paginate {
        font-size: 0.70em;
      }
    "))

  )

```

## DAM DATABASE : assessment of passability

```{mermaid}
%%| fig-cap: Simplied structure of the dam database
flowchart TB
    A([Obstruction place]):::table
    %% Short Path
    A --> B([Obstruction]):::table
    B -->|Upstream| F([fish passage]):::main
    B -->|Downstream| C([Hydro Power Plant]):::table
    C --> D([Turbine]):::table    
    classDef table fill:#CD88
    classDef main fill:#268073,color:white
```

## DAM DATABASE : assessment of passability

```{r}
#| label: tbl-fishway
#| echo: FALSE
#| eval: TRUE
#| warning: FALSE
#| html-table-processing: none


 dam_fi <-dbGetQuery(con_diaspara, "SELECT 
 fi_id_original, 
 species.no_name,
 fi_presence_pass,
 fi_date
  FROM dam_france.fishway  
  JOIN nomenclature.species on species.no_id=fi_species_id
  limit 100;")

 save(dam_fi, file="data/presentation_dam_fi.Rdata")
load(file="data/presentation_dam_fi.Rdata")

 dam_fi |> 
 DT::datatable(rownames = FALSE,
  options = list(
    pageLength = 5,        
    scrollX= TRUE   
  )
)|>
  htmltools::tagList(
   

     htmltools::tags$style(HTML("
      /* Table cells */
      table.dataTable td {
        font-size: 0.6em;
      }

      /* Table headers */
      table.dataTable th {
        font-size: 0.65em;
      }

      /* Control bar: search input, pagination, etc. */
      .dataTables_wrapper .dataTables_filter,
      .dataTables_wrapper .dataTables_length,
      .dataTables_wrapper .dataTables_info,
      .dataTables_wrapper .dataTables_paginate {
        font-size: 0.70em;
      }
    "))

  )

```

## DAM DATABASE : Hydro Power Plants

```{mermaid}
%%| fig-cap: Simplied structure of the dam database
flowchart TB
    A([Obstruction place]):::table
    %% Short Path
    A --> B([Obstruction]):::table
    B -->|Upstream| F([fish passage]):::table
    B -->|Downstream| C([Hydro Power Plant]):::main
    C --> D([Turbine]):::table    
    classDef table fill:#CD88
    classDef main fill:#268073,color:white
```

## DAM DATABASE : Hydro Power

```{r}
#| label: tbl-hpp
#| echo: FALSE
#| eval: TRUE
#| warning: FALSE
#| html-table-processing: none
#| tbl-cap: Hydropower plant table


 dam_hpp <-dbGetQuery(con_diaspara, "SELECT 
 *
  FROM dam_france.hpp   
  limit 100;")

 save(dam_hpp, file="data/presentation_dam_hpp.Rdata")
load(file="data/presentation_dam_hpp.Rdata")

 dam_hpp |> 
 DT::datatable(rownames = FALSE,
  options = list(
    pageLength = 5,        
    scrollX= TRUE   
  )
)|>
  htmltools::tagList(
   

     htmltools::tags$style(HTML("
      /* Table cells */
      table.dataTable td {
        font-size: 0.6em;
      }

      /* Table headers */
      table.dataTable th {
        font-size: 0.65em;
      }

      /* Control bar: search input, pagination, etc. */
      .dataTables_wrapper .dataTables_filter,
      .dataTables_wrapper .dataTables_length,
      .dataTables_wrapper .dataTables_info,
      .dataTables_wrapper .dataTables_paginate {
        font-size: 0.70em;
      }
    "))

  )

```


## DAM DATABASE : Turbines

```{mermaid}
%%| fig-cap: Simplied structure of the dam database
flowchart TB
    A([Obstruction place]):::table
    %% Short Path
    A --> B([Obstruction]):::table
    B -->|Upstream| F([fish passage]):::table
    B -->|Downstream| C([Hydro Power Plant]):::table
    C --> D([Turbine]):::main    
    classDef table fill:#CD88
    classDef main fill:#268073,color:white
```

## DAM DATABASE : Turbines

::::: columns
::: {.column width="50%"}
```{r}
#| label: tbl-turbines
#| echo: FALSE
#| eval: TRUE
#| warning: FALSE
#| html-table-processing: none
#| tbl-cap: Hydropower plant table


 dam_turb <-dbGetQuery(con_diaspara, "SELECT 
 *
  FROM dam_france.turbine  
  limit 100;")

 save(dam_turb, file="data/presentation_dam_turb.Rdata")
load(file="data/presentation_dam_turb.Rdata")

 dam_turb |> 
 DT::datatable(rownames = FALSE,
  options = list(
    pageLength = 5,        
    scrollX= TRUE   
  )
)|>
  htmltools::tagList(
   

     htmltools::tags$style(HTML("
      /* Table cells */
      table.dataTable td {
        font-size: 0.6em;
      }

      /* Table headers */
      table.dataTable th {
        font-size: 0.65em;
      }

      /* Control bar: search input, pagination, etc. */
      .dataTables_wrapper .dataTables_filter,
      .dataTables_wrapper .dataTables_length,
      .dataTables_wrapper .dataTables_info,
      .dataTables_wrapper .dataTables_paginate {
        font-size: 0.70em;
      }
    "))

  )

```
:::
::: {.column width="50%"}
<br>
<br>
<html>
<div style="overflow: auto; max-height: 500px; max-width: 100% ">
<head>
<meta charset="UTF-8"/><style>
table {border: medium solid #6495ed;border-collapse: collapse;width: 100%;} th{font-family: monospace; border: thin solid #6495ed;padding: 5px;background-color: #D0E3FA;}th{text-align: left;font-size: 0.7em;}td{font-family: sans-serif;border: thin solid #6495ed;padding: 5px;text-align: center;font-size: 0.6em;}.odd{background:#e8edff;}img{padding:5px; border:solid; border-color: #dddddd #aaaaaa #aaaaaa #dddddd; border-width: 1px 2px 2px 1px; background-color:white;}</style>
</head>
<body>
<table><tr><th colspan="4"><pre><code>Table turbine_type</code></pre></th></tr><tr><th>no_id</th><th>no_code</th><th>no_type</th><th>no_name</th></tr><tr class="odd"><td>242</td><td>&nbsp;</td><td>Turbine type</td><td>Horizontal axis Kaplan (bulb)</td></tr>
<tr><td>243</td><td>&nbsp;</td><td>Turbine type</td><td>Other (please specify)</td></tr>
<tr class="odd"><td>244</td><td>&nbsp;</td><td>Turbine type</td><td>Double Francis (spiral case)</td></tr>
<tr><td>245</td><td>&nbsp;</td><td>Turbine type</td><td>Francis unspecified</td></tr>
<tr class="odd"><td>246</td><td>&nbsp;</td><td>Turbine type</td><td>Turbine with fixed blade propeller and vertical axis</td></tr>
<tr><td>247</td><td>&nbsp;</td><td>Turbine type</td><td>Kaplan not specified</td></tr>
<tr class="odd"><td>248</td><td>&nbsp;</td><td>Turbine type</td><td>Pelton</td></tr>
<tr><td>249</td><td>&nbsp;</td><td>Turbine type</td><td>Reversible</td></tr>
<tr class="odd"><td>250</td><td>&nbsp;</td><td>Turbine type</td><td>Kaplan (model of S-turbine)</td></tr>
<tr><td>251</td><td>&nbsp;</td><td>Turbine type</td><td>Turbine with fixed blade propeller and horizontal axis</td></tr>
<tr class="odd"><td>252</td><td>&nbsp;</td><td>Turbine type</td><td>Unknown</td></tr>
<tr><td>253</td><td>&nbsp;</td><td>Turbine type</td><td>Vertical axis Kaplan</td></tr>
<tr class="odd"><td>254</td><td>&nbsp;</td><td>Turbine type</td><td>Francis without volute</td></tr>
<tr><td>255</td><td>&nbsp;</td><td>Turbine type</td><td>Francis (spiral case)</td></tr>
<tr class="odd"><td>256</td><td>&nbsp;</td><td>Turbine type</td><td>Banki-Michell (cross-flow)</td></tr>
<tr><td>257</td><td>&nbsp;</td><td>Turbine type</td><td>VLH</td></tr>
<tr class="odd"><td>258</td><td>&nbsp;</td><td>Turbine type</td><td>Archimedean screw turbine</td></tr>
<tr><td>259</td><td>&nbsp;</td><td>Turbine type</td><td>Water wheel turbine (aqualienne)</td></tr>
<tr class="odd"><td>260</td><td>&nbsp;</td><td>Turbine type</td><td>Water wheel turbine (others)</td></tr>
<tr><td>261</td><td>&nbsp;</td><td>Turbine type</td><td>Propeller unspecified</td></tr>
</table></body></div></html>




:::
:::::


# Electrofishing


::::: columns
::: {.column width="50%"}
![](images/clipboard-550275409.png "Eel and brown trout"){width="370"} ![](images/clipboard-639830824.png "electrofishing"){width="370"}
:::

::: {.column width="50%"}
-   Electrofishing similarly to migration obstacles
-   We are working on this db now
-   Templates to be tested
:::
:::::

# Biological and Biometric data 


Everything is linked to Life History Trait data




# All groups have identified this need, but it was not easily accessible

::::: columns
::: {.column .incremental width="50%"}
-   Get the Biological data in a database
-   Use it for analysis
-   Understanding growth, fecundity, etc. **over time and spatially**
:::

::: {.column width="50%"}
![](images/clipboard-2516448368.png)
:::
:::::

# BEFORE INTRODUCING THE METRIC DB

-   relate to WGEEL recruitment trend analysis: analysis of silver eel or yellow eel.
-   Maybe something from WGBAST

# Example of group metrics

-   EXAMPLE HERE

# Example of individual metrics

-   EXAMPLE HERE

# Other parameters

# Trend analysis - why do we need series?

-   Example from WGEEL (check WGEEL REPORTS + Latest recruitment series)

-   Example from WGNAS (WP2 Viktor to send some pictures.)

## This presentation

::::: columns
::: {.column .incremental width="40%"}
![](images/clipboard-550275409.png "Eel and brown trout"){width="370"} ![](images/clipboard-639830824.png "electrofishing"){width="370"}
:::

::: {.column width="60%"}
-   [**Overall - Whole Stock**]{style="font-size:45px"}
:::
:::::


# Thank you!
