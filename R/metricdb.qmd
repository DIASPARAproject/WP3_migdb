---
title: "diaspara metric database creation script"
subtitle: "DIASPARA WP3.2 working document"
author: "Briand CÃ©dric, Oliviero Jules, Helminen Jani"
date: last-modified
date-format: "DD-MM-YYYY"
description: "Creation of metric db, version = build"
title-block-banner: "images/diaspara_bandeau.png"
title-block-banner-color: "white"
format:
 html:
  self-contained: true
  theme: styles.scss
  smooth-scroll: true
  fontcolor: black
  toc: true
  toc-location: left
  toc-title: Summary
  toc-depth: 3
execute: 
 keep-md: true
filters:
  - include-code-files
reference-location: document
bibliography: diaspara.bib
include-after-body: "footer.html"
---

Aside the main db report, which describes all the vocabularies used in this document, we have to build a separate database for metrics. In the project these correspond to LHT, but it's more, the data should also correspond to the time series and the sampling db developped by WGEEL. The two latter data structure (series and sampling) are very similar and they both hold very similar group metrics and individual metrics.

 The first was developed initially to store data about the series used in recruitment. In practice, it consists of three tables, the `t_series_ser` (Figure @fig-series_diagram_wgeel - top in blue) table contains series id and description, with columns describing the sampling details, the stage used, the method... This is the main identifier of the series which will be used as a reference in all dependent tables. The second `t_dataseries_das` table  (Figure @fig-series_diagram_wgeel - on the right) holds data about annual values in series. These are typically annual counts for recruitment, along with additional effort data. Linked to these are group metric series used to describe the series, mean age of eel, mean size, proportion of glass eel among the yellow eels, proportion of females ... (Figure @fig-series_diagram_wgeel - in orange)
Finally, we can link individual metrics. The individual metrics are all detailed for one fish. And they concern metrics like size, weight, sex, but also can hold data about quality, contamination. So these are in essence the Life History traits analysed by WP2 in DIASPARA  (Figure @fig-series_diagram_wgeel - in pink).

![Diagram for series](images/series_diagram_wgeel.png "A sql diagram of the relations of tables for series"){#fig-series_diagram_wgeel}

The second type of data was developed to hold the data collected for DCF. These can be metrics collected from sampling by the fishermen, data coming from the analysis of electrofishing data, or other experimental sampling that are not reported as series. Currently the two structures for series and sampling are very close, the only difference is that there is no annual number linked to the sampling data, and that they are not linked to a stage in the first table, so the stage is added in the fish table.
The difference in table structure is illustrated below in tables highlighted in yellow (Figure @fig-sampling_diagram_wgeel).

![Diagram for sampling](images/sampling_diagram_wgeel.png "A sql diagram of the relations of tables for sampling"){#fig-sampling_diagram_wgeel}

The database development highlighted in the current report has several objectives :

* The first objective is to join the two database to simplify the database development and handling of data.

* The second objective is to use the new referentials created for the migdb database.

* The third objective is to import data from WP2, the excel sheets have been created in february 2025 and will already (in March) require some adaptation as the database evolves, for instance the referential of stages is no longer in line with the templates.

* The fourth objective is to hand over this database, along with the migdb to ICES, for integration in ICES database ecosystem, and use of DATSU in datacall.

* The fifth objective is to adapt the shiny scripts of data integration.

# Creating the database structure from WGEEL (TODO)


[git issue #23 Write simplified structure from WGEEL](https://github.com/DIASPARAproject/WP3_migdb/issues/23)

The main issue will require to merge the two table structures (sampling and series) and adapt to migdb vocabulary.

Once done a beta version probably not completely adapted will be released.

[milestone metric DB beta version](https://github.com/DIASPARAproject/WP3_migdb/milestone/6)



```{dot}
//| label: fig-schema_diaspara
//| fig-cap: Simplified structure of the metric database. The time series table, start with an identifier (at the bottom) which correspond to a station or a regional monitoring program. The series contains the main attributes, including geometry, species stage ... This table is empty and filled by inheritance (---> arrows).The actual data are in the schema corresponding to each working group (pink and green).
digraph schema {
	rankdir=TB;
	size="8,5"
    node [style=filled, fillcolor=gray, shape = record];	
    vocab [fillcolor="gray"
       label=<<table border="0" cellborder="1" cellspacing="0" cellpadding="4">
       <tr> <td> <b>ref.vocab</b> </td> </tr>
       <tr> <td align="left">
        ser_id (uuid) <br align="left"/>
        ser_code (text)  </td> </tr> 
       </table>> 
       shape = Msquare];
    stationDictionary [fillcolor="gray"
       label=<<table border="0" cellborder="1" cellspacing="0" cellpadding="4">
       <tr> <td> <b>ref.StationDictionary</b> </td> </tr>
       <tr> <td align="left">
        sta_code (integer)  <br align="left"/>
        sta_activefromdate date <br align="left"/>
        sta_activeuntildate date </td> </tr> 
       </table>> 
       shape = Msquare];
    ts [fillcolor="gray"
       label=<<table border="0" cellborder="1" cellspacing="0" cellpadding="4">
       <tr> <td> <b>dat.series</b> </td> </tr>
       <tr> <td align="left">
        ser_id <br align="left"/>
        ...    </td> </tr> 
       </table>> 
       shape = record];
    metts [fillcolor="gray"
       label=<<table border="0" cellborder="1" cellspacing="0" cellpadding="4">
       <tr> <td> <b> ?? dat.metadata-series ??</b> </td> </tr>
       <tr> <td align="left">
       ser_id  <br align="left"/>
       ...     </td> </tr> 
       </table>> 
       shape = folder];
   ann [fillcolor="gray"
       label=<<table border="0" cellborder="1" cellspacing="0" cellpadding="4">
       <tr> <td> <b>dat.annual-series</b> </td> </tr>
       <tr> <td align="left">
       ser_id  <br align="left"/>
       year  <br align="left"/>  
       ...   </td> </tr> 
       </table>> 
       shape = record];    
   groupmetrics [fillcolor="gray"
       label=<<table border="0" cellborder="1" cellspacing="0" cellpadding="4">
       <tr> <td> <b>dat.groupmetrics</b> </td> </tr>
       <tr> <td align="left">
       ser_id  <br align="left"/>
       year   <br align="left"/>
       mean size <br align="left"/>
       ... </td> </tr> 
       </table>> 
       shape = record];
   fish [fillcolor="gray"
       label=<<table border="0" cellborder="1" cellspacing="0" cellpadding="4">
       <tr> <td> <b>dat.fish</b> </td> </tr>
       <tr> <td align="left">
       ser_id  <br align="left"/>
       fi_id   <br align="left"/>
       x   <br align="left"/>
       y   <br align="left"/>
       date <br align="left"/>
       ... </td> </tr> 
       </table>> 
       shape = record];
   indmetrics [fillcolor="gray"
       label=<<table border="0" cellborder="1" cellspacing="0" cellpadding="4">
       <tr> <td> <b>dat.individualmetrics</b> </td> </tr>
       <tr> <td align="left">
       fi_id  <br align="left"/>
       metric_id  <br align="left"/>
       value  <br align="left"/> </td> </tr> 
       </table>> 
       shape = record];
   traits [fillcolor="gray"
       label=<<table border="0" cellborder="1" cellspacing="0" cellpadding="4">
       <tr> <td> <b>ref.metric</b> </td> </tr>
       <tr> <td align="left">     
       metric_id (length, weight..)  <br align="left"/>
        </td> </tr> 
       </table>> 
       shape = record];             
   tseel [fillcolor="pink"
       label="dateel.series"
       shape = table];   
   mettseel [fillcolor="pink"
       label="dateel.metadata-series"
       shape = folder];
   anneel [fillcolor="pink"
       label="dat.annual-series"
       shape = record]; 
   groupmetricseel [fillcolor="pink"
       label="dateel.groupmetrics"
       shape = record];  
   indmetricseel [fillcolor="pink"
       label="dateel.indmetrics"
       shape = record]; 
   fisheel [fillcolor="pink"
       label="dateel.fish"
       shape = record];        
   tsnas [fillcolor="limegreen"
       label="datnas.series"
       shape = table];   
   mettsnas [fillcolor="limegreen"
       label="datnas.metadata-series"
       shape = folder];
   indmetricsnas [fillcolor="limegreen"
       label="datnas.indmetrics"
       shape = record]; 
   fishnas [fillcolor="limegreen"
       label="datnas.fish"
       shape = record]; 

  metts  -> ts -> vocab [label = "1:1"]
  metts -> stationDictionary  [label = "1:1"]
  groupmetrics -> ann -> ts [label = "n:1"]
  indmetrics -> fish -> ts [label = "n:1"]
  indmetrics -> traits

  groupmetricseel -> metanneel [label = "n:1"]
  anneel -> tseel [label = "n:1"]
  mettseel -> tseel ->  vocab [label = "1:1"]
  indmetricseel -> fisheel -> tseel  [label = "n:1"]
  

  mettsnas -> tsnas ->  vocab [label = "1:1"]
  indmetricsnas -> fishnas -> tsnas  [label = "n:1"]

  groupmetricseel -> groupmetrics [label="inherits", style="dashed"]
  indmetricseel -> indmetrics [label="inherits", style="dashed"]
  indmetricsnas -> indmetrics [label="inherits", style="dashed"]
  fisheel -> fish [label="inherits", style="dashed"]
  fishnas -> fish [label="inherits", style="dashed"] 
  anneel -> ann [ label="inherits", style="dashed"]
  tseel -> ts [ label="inherits", style="dashed"]
  tsnas -> ts [ label="inherits", style="dashed", labelOverlay="15%"]
  mettseel -> metts [label="inherits", style="dashed"]
  mettsnas -> metts [ label="inherits", style="dashed"]

  // make the same rank

  {rank = same; tseel;tsnas}
}
```

```{r init}
#| echo: FALSE
#| warning: FALSE
#| message: FALSE
#| results: 'hide'

#if (!grepl("montepomi", getwd())) {
if(Sys.info()[["user"]] == 'joliviero'){
setwd("D:/workspace/DIASPARA_WP3_migdb/R")
datawd <- "D:/DIASPARA/wgbast"
} else if (Sys.info()[["user"]] == 'cedric.briand'){
setwd("C:/workspace/DIASPARA_WP3_migdb/R")
datawd <- "C:/Users/cedric.briand/OneDrive - EPTB Vilaine/Projets/DIASPARA/wgbast"
}
source("utilities/load_library.R")
load_library("tidyverse")
load_library("knitr")
load_library("kableExtra")
load_library("icesVocab")
load_library("readxl")
load_library("janitor")
load_library("skimr")
load_library("RPostgres")
load_library("yaml")
load_library("DBI")
load_library("ggplot2")
load_library("sf")
load_library("janitor") # clean_names
load_library("uuid")
cred <- read_yaml("../credentials.yml")
con_diaspara <- dbConnect(Postgres(), 
                           dbname = cred$dbnamediaspara,
                           host = cred$host,
                           port = cred$port,
                           user = cred$userdiaspara,
                           password = cred$passworddiaspara)
con_diaspara_admin <- dbConnect(Postgres(), 
                           dbname = cred$dbnamediaspara,
                           host = cred$host,
                           port = cred$port,
                           user = cred$usersalmo,
                           password = cred$passwordsalmo)
con_salmoglob <- dbConnect(Postgres(), 
                           dbname = cred$dbnamesalmo,
                           host = cred$host,
                           port = cred$port,
                           user = cred$usersalmo,
                           password = cred$passwordsalmo)
con_wgeel_distant <- dbConnect(Postgres(), 
                           dbname = cred$dbnamedistant,
                           host = cred$hostdistant,
                           port = cred$port,
                           user = cred$userdistant,
                           password = cred$passworddistant)
con_wgeel_local <- dbConnect(Postgres(), 
                           dbname = "wgeel",
                           host = '127.0.0.1',
                           port = cred$port,
                           user = cred$userdistant,
                           password = cred$passwordsalmo)


```

## Station

To include the station, we need two tables, the fist one is the Station dictionary
and the second is the relation Dictionary (which relates two stations together).
Now these tables in turn rely on some vocabs from ICES which we are loading
straight as they are in our template database.

### SemanticRelation


```{r tbl-icesVocabRelation}
#| echo: TRUE
#| eval: TRUE
#| warning: FALSE
#| message: FALSE
#| code-fold: TRUE
#| code-summary: Code to show SemanticRelation.
#| tbl-cap: Semantic relation
SemanticRelation <- getCodeList("SemanticRelation")
knitr::kable(SemanticRelation) %>% kable_styling(bootstrap_options = c("striped", "hover", "condensed"))

```
```{r icesVocabRelation}
#| echo: TRUE
#| eval: FALSE
#| warning: FALSE
#| message: FALSE
#| code-fold: TRUE
#| code-summary: Code to import relation.
#| tbl-cap: Semantic relation
dbWriteTable(con_diaspara, "SemanticRelation", PRGOV)
dbExecute(con_diaspara, 'ALTER TABLE "SemanticRelation" SET SCHEMA ref;') 
dbExecute(con_diaspara, 'ALTER TABLE ref."SemanticRelation" ADD CONSTRAINT semanticrelation_pkey PRIMARY KEY ("Key");') 

```

### PRGOV
```{r tbl-icesPRGOV}
#| echo: TRUE
#| eval: TRUE
#| warning: FALSE
#| message: FALSE
#| code-fold: TRUE
#| code-summary: Code to show PRGOV.
#| tbl-cap: Program Governance for the Station Dictionary (10 first lines)


PRGOV <- getCodeList("PRGOV")
knitr::kable(PRGOV) %>% kable_styling(bootstrap_options = c("striped", "hover", "condensed"))
```

```{r icesPRGOV}
#| echo: TRUE
#| eval: FALSE
#| warning: FALSE
#| message: FALSE
#| code-fold: TRUE
#| code-summary: Code to import PRGOV.
#| tbl-cap: Program Governance for the Station Dictionary
dbWriteTable(con_diaspara, "PRGOV", PRGOV)
dbExecute(con_diaspara, 'ALTER TABLE "PRGOV" SET SCHEMA ref;') 
dbExecute(con_diaspara, 'ALTER TABLE ref."PRGOV" ADD CONSTRAINT prgov_pkey PRIMARY KEY ("Key");') 
```

### EDMO

```{r tbl-icesEDMO}
#| echo: TRUE
#| eval: TRUE
#| warning: FALSE
#| message: FALSE
#| code-fold: TRUE
#| code-summary: Code to show EDMO.
#| tbl-cap: European Directory of Marine Organisations (EDMO)


EDMO <- getCodeList("EDMO") %>% slice_head(n=10)  %>%
knitr::kable()  %>% kable_styling(bootstrap_options = c("striped", "hover", "condensed"))
```

:::{.callout-tip appearance="simple"}
## Addings institutions to the EDMO
To request a new EDMO an organisation needs to send an email to info@maris.nl
:::



```{r icesEDMO}
#| echo: TRUE
#| eval: FALSE
#| warning: FALSE
#| message: FALSE
#| code-fold: TRUE
#| code-summary: Code to import EDMO.
#| tbl-cap: European Directory of Marine Organisations (EDMO)

dbWriteTable(con_diaspara, "EDMO", EDMO)
dbExecute(con_diaspara, 'ALTER TABLE "EDMO" SET SCHEMA ref;')  
dbExecute(con_diaspara, 'ALTER TABLE ref."EDMO" ADD CONSTRAINT edmo_pkey PRIMARY KEY ("Key");')  
```

### PURPM

```{r tbl-icesPURPM}
#| echo: TRUE
#| eval: TRUE
#| warning: FALSE
#| message: FALSE
#| code-fold: TRUE
#| code-summary: Code to show PURPM.
#| tbl-cap: Purpose of Monitoring


PURPM <- getCodeList("PURPM")
knitr::kable(PURPM) %>% kable_styling(bootstrap_options = c("striped", "hover", "condensed"))
```

```{r icesPURPM}
#| echo: TRUE
#| eval: FALSE
#| warning: FALSE
#| message: FALSE
#| code-fold: TRUE
#| code-summary: Code to import PURPM.
dbWriteTable(con_diaspara, "PURPM", PURPM)
dbExecute(con_diaspara, 'ALTER TABLE "PURPM" SET SCHEMA ref;')
dbExecute(con_diaspara, 'ALTER TABLE ref."PURPM" ADD CONSTRAINT purm_pkey PRIMARY KEY ("Key");')    
```

### DTYPE

```{r tbl-icesStation_DTYPE}
#| echo: TRUE
#| eval: TRUE
#| warning: FALSE
#| message: FALSE
#| code-fold: TRUE
#| code-summary: Code to show icesStation_DTYPE.
#| tbl-cap: Station dictionary data type
Station_DTYPE <- getCodeList("Station_DTYPE")
knitr::kable(Station_DTYPE) %>% kable_styling(bootstrap_options = c("striped", "hover", "condensed"))
```

```{r icesStation_DTYPE}
#| echo: TRUE
#| eval: FALSE
#| warning: FALSE
#| message: FALSE
#| code-fold: TRUE
#| code-summary: Code to import icesStation_DTYPE.

dbWriteTable(con_diaspara, "Station_DTYPE", Station_DTYPE)
dbExecute(con_diaspara, 'ALTER TABLE "Station_DTYPE" SET SCHEMA ref;')  
dbExecute(con_diaspara, 'ALTER TABLE ref."Station_DTYPE" ADD CONSTRAINT station_dtype_pkey PRIMARY KEY ("Key");') 
```

### WLTYP

```{r tbl-icesStation_WLTYP}
#| echo: TRUE
#| eval: TRUE
#| warning: FALSE
#| message: FALSE
#| code-fold: TRUE
#| code-summary: Code to show ices WLTYP.
#| tbl-cap: Water and Land Station Type
WLTYP <- getCodeList("WLTYP")
knitr::kable(WLTYP) %>% kable_styling(bootstrap_options = c("striped", "hover", "condensed"))
```
```{r icesStation_WLTYP}
#| echo: TRUE
#| eval: FALSE
#| warning: FALSE
#| message: FALSE
#| code-fold: TRUE
#| code-summary: Code to import ices WLTYP.

dbExecute(con_diaspara, 'DROP TABLE IF EXISTS ref."WLTYP";')
WLTYP$Key[is.na(WLTYP$Key)] <- "NA"
dbWriteTable(con_diaspara, "WLTYP", WLTYP)
dbExecute(con_diaspara, 'ALTER TABLE "WLTYP" SET SCHEMA ref;') 
dbExecute(con_diaspara, 'ALTER TABLE ref."WLTYP" ADD CONSTRAINT wltype_pkey PRIMARY KEY ("Key");') 

```

### MSTAT

```{r tbl-icesStation_MSTAT}
#| echo: TRUE
#| eval: TRUE
#| warning: FALSE
#| message: FALSE
#| code-fold: TRUE
#| code-summary: Code to show ices MSTAT.
#| tbl-cap: Type of monitoring station


MSTAT <- getCodeList("MSTAT")
knitr::kable(MSTAT) %>% kable_styling(bootstrap_options = c("striped", "hover", "condensed"))
```

```{r icesStation_MSTAT}
#| echo: TRUE
#| eval: FALSE
#| warning: FALSE
#| message: FALSE
#| code-fold: TRUE
#| code-summary: Code to import ices MSTAT.
dbWriteTable(con_diaspara, "MSTAT", MSTAT)
dbExecute(con_diaspara, 'ALTER TABLE ref."MSTAT" ADD CONSTRAINT mstat_pkey PRIMARY KEY ("Key");')   
```


### Deprecated


```{r tbl-icesStation_Deprecated}
#| echo: TRUE
#| eval: TRUE
#| warning: FALSE
#| message: FALSE
#| code-fold: TRUE
#| code-summary: Code to show ices Deprecated.
#| tbl-cap: Deprecated
Deprecated <- getCodeList("Deprecated")
knitr::kable(Deprecated) %>% kable_styling(bootstrap_options = c("striped", "hover", "condensed"))
```

## Habitat

THe habitat database is managed by [EIONET](http://dd.eionet.europa.eu/vocabulary/art17_2018/habitats/)
Habitats directive Art. 17 reporting in year 2018.

<details>

<summary>SQL code to create tables</summary>

``` {.sql include="../SQL/metric_03_ref_tr_habitat_hab.sql"}
```

</details>

:::{.questionbox}
::::{.questionbox-header}
::::{.questionbox-icon}
::::
ICES / DIASPARA is this enough ?
::::
::::{.questionbox-body}
The idea was to have estuaries and lagoons, but rivers are associated with vegetation, 
So I'm not sure if this vocab is enough ?
::::
:::


```{r habitat}
#| echo: TRUE
#| eval: FALSE
#| warning: FALSE
#| message: FALSE
#| code-fold: TRUE
#| code-summary: Code to import habitat from eionet.


# Load required libraries
library(XML)

# Parse the XML file downloaded from https://dd.eionet.europa.eu/vocabulary/art17_2018/habitats/codelist
xml_file <- "R/data/habitats.xml"Â  # Replace with your actual file path
#file.exists("R/data/habitats.xml")
xml_data <- xmlParse(xml_file)

# Extract all <value> nodes
values <- getNodeSet(xml_data, "//value")

# Extract relevant data into a data frame
extract_info <- function(node) {
Â  id <- xmlGetAttr(node, "id")
  code <- gsub("http://dd.eionet.europa.eu/vocabulary/art17_2018/habitats/", x= id,replacement = "")
Â  label <- xmlValue(node[["label"]])
  defintion <- xmlValue(node[["defintion"]])
Â  status_node <- getNodeSet(node, ".//status/label")[[1]]
Â  status <- xmlValue(status_node)
Â  return(data.frame(id = id, code = code, label = label,status = status, stringsAsFactors = FALSE))
}

habitat <- do.call(rbind, lapply(values, extract_info))
habitat <- habitat[c(1:32,77:84,125:142),]

# Save the data frame as an RData file
save(habitat, file = "habitat_art_17_2018.RData")
# load(file = "habitat_art_17_2018.RData")
dbExecute(con_diaspara, 'DELETE FROM ref.tr_habitat_hab;')

dbWriteTable(con_diaspara, "habitat_temp", habitat)

dbExecute(con_diaspara, 'INSERT INTO "ref".tr_habitat_hab SELECT code, label, id, NULL, NULL, NULL FROM habitat_temp;') #58
dbExecute(con_diaspara, "DROP TABLE habitat_temp")#0
 
```

```{r tbl-habitat}
#| echo: TRUE
#| eval: TRUE
#| warning: FALSE
#| message: FALSE
#| code-fold: TRUE
#| code-summary: Code to show habitat table (to be imported in ICES vocab).
#| tbl-cap: Habitat table ?

habitat <- dbGetQuery(con_diaspara, "SELECT * FROM ref.tr_habitat_hab;")
knitr::kable(habitat) %>% kable_styling(bootstrap_options = c("striped", "hover", "condensed"))
```

## Fishway type ref.tr_fishway_fiw


<details>

<summary>SQL code to create tables</summary>

``` {.sql include="../SQL/metric_04_ref_tr_fishway_fiw.sql"}
```

</details>


```{r tbl-fishway}
#| echo: TRUE
#| eval: TRUE
#| warning: FALSE
#| message: FALSE
#| code-fold: TRUE
#| code-summary: Code to show fishway table (to be imported in ICES vocab).
#| tbl-cap: Fishway vocab proposed to ICES.

habitat <- dbGetQuery(con_diaspara, "SELECT * FROM ref.tr_fishway_fiw;")
knitr::kable(habitat) %>% kable_styling(bootstrap_options = c("striped", "hover", "condensed"))
```

## Fish migration monitoring  ref.tr_monitoring_mon


<details>

<summary>SQL code to create tables</summary>

``` {.sql include="../SQL/metric_05_ref_tr_monitoring_mon.sql"}
```

</details>


```{r tbl-monitoring}
#| echo: TRUE
#| eval: TRUE
#| warning: FALSE
#| message: FALSE
#| code-fold: TRUE
#| code-summary: Code to show fishway table (to be imported in ICES vocab).
#| tbl-cap: Fishway vocab proposed to ICES.

habitat <- dbGetQuery(con_diaspara, "SELECT * FROM ref.tr_monitoring_mon;")
knitr::kable(habitat) %>% kable_styling(bootstrap_options = c("striped", "hover", "condensed"))
```

## Fish Traits  ref.tr_trait_tra

This one was formerly called metric, but metric `ref.tr_metric_met` already exist and is better
suited to statistics (mean, sd ... ). So we are using the word trait.
Trait is refering to a species (there are different method,
or different measurements for different species).
The trait can be, either qualitative or quantitative.
The trait is measured by a method, the measure (either categorical
eg. sex = 'Male') or quantitative e.g. (length_mm = 150) might be accompanied by a method.
For instance a fish is measured for length as fork length or total length,
in the individual_trait table, the fish will be related to three columns,
the code of the length parameter in the trait table, the quantitative value,
and the method used.

<details>

<summary>SQL code to create table `tr_trait_tra`</summary>

``` {.sql include="../SQL/metric_06_ref_tr_trait_tra.sql"}
```

</details>

## Numeric fish trait (tr_traitnumeric_trn)

Trait can be either qualitative or quantitative (numeric). Both tables are inherited from 
`tr_trait_tra`. 

<details>

<summary>SQL code to create table `tr_traitnumeric_trn` </summary>

``` {.sql include="../SQL/metric_06_ref_tr_traitnumeric_trn.sql"}
```

```{r refeel_tr_traitnumeric_trn_insert}
#| echo: TRUE
#| eval: FALSE
#| warning: FALSE
#| message: FALSE
#| code-fold: TRUE
#| code-summary: Code to import numeric trait.

tra <- dbGetQuery(con_wgeel_local, "SELECT * FROM ref.tr_metrictype_mty ;")
# we will include group metric names later
tra <- tra[!grepl("mean", tra$mty_name),]
# we will also include method later
tra <- tra[!grepl("method", tra$mty_name),]
res <- dbGetQuery(con_diaspara, "SELECT * FROM ref.tr_trait_tra")
#clipr::write_clip(colnames(res))
tranum <- data.frame(
"tra_id" = tra$mty_id,
"tra_code" = stringi::stri_trans_totitle(tra$mty_name),
"tra_description" = tra$mty_description,
"tra_wkg_code" = 'WGEEL',
"Tra_spe_code" = 'ANG',
"trn_uni_code" = tra$mty_uni_code,
"tra_typemetric"=stringi::stri_trans_totitle(tra$mty_group),"tra_qualitativeornumeric"='Numeric',
"trn_minvalue" = tra$mty_min,
"trn_maxvalue" = tra$mty_max)

# the proportions will be numeric for group and qualitative for individual (
# e.g. evex presence)

tranum[tranum$tra_typemetric=="Both" & grepl("proportion",tranum$tra_code),
c("tra_typemetric")] <- "Group"


# view(tranum)
# fix names
tranum$tra_description[tranum$tra_code=="Lengthmm"] <- 'Total body length in millimeters (mm) or mean total body length for group'
tranum$tra_description[tranum$tra_code=="Differentiated_proportion"] <- 'Proportion of differentiated eel (between 0 and 1)'

tranum$tra_description[tranum$tra_code=="Female_proportion"] <- 'Female proportion in the population female/(male+female) for group (between 0 and 1)'
tranum$tra_description[tranum$tra_code=="Anguillicola_proportion"] <- 'Prevalence of Anguillicola in proportion in group (between 0 and 1)'
tranum$tra_description[tranum$tra_code=="Evex_proportion"] <- 'EVE and EVEX proportion in the group (between 0 and 1)'
tranum$tra_description[tranum$tra_code=="Hva_proportion"] <- 'HVA proportion in the group (between 0 and 1)'
# duplicated, now two methods
tranum <- tranum[tranum$tra_id!=11,] 
tranum$tra_description[tranum$tra_id==10] <-
"Lipid percentage or mean muscle lipid percentage for group"
tranum[tranum$tra_id==10,"tra_code"] <- "Muscle_lipid"

dbWriteTable(con_diaspara_admin, "tr_traitnumeric_trn_temp", tranum, overwrite =TRUE)
dbExecute(con_diaspara_admin, "DELETE FROM refeel.tr_traitnumeric_trn")
dbExecute(con_diaspara_admin, "INSERT INTO refeel.tr_traitnumeric_trn(
tra_id,
tra_code,
tra_wkg_code,
tra_spe_code,
tra_description,
tra_typemetric,
trn_uni_code,
tra_qualitativeornumeric,
trn_minvalue,
trn_maxvalue)
SELECT 
tra_id,
tra_code,
'WGEEL',
'ANG',
tra_description,
tra_typemetric,
trn_uni_code,
tra_qualitativeornumeric,
trn_minvalue,
trn_maxvalue
 FROM tr_traitnumeric_trn_temp") #18

```


</details>

## Qualitative fish trait (tr_traitqualitative_trq)

<details>

<summary>SQL code to create table `tr_traitqualitative_trq` </summary>

``` {.sql include="../SQL/metric_06_ref_tr_traitqualitative_trq.sql"}
```
</details>

```{r refeel_tr_traitqualitative_trq_insert}
#| echo: TRUE
#| eval: FALSE
#| warning: FALSE
#| message: FALSE
#| code-fold: TRUE
#| code-summary: Code to import qualitative table.

tra <- dbGetQuery(con_wgeel_local, "SELECT * FROM ref.tr_metrictype_mty ;")
# we will include group metric names later
tra <- tra[grepl("is_", tra$mty_individual_name) | grepl("presence", tra$mty_individual_name),]
# we will also include method later

#clipr::write_clip(colnames(res))
traqal <- data.frame(
"tra_id" = tra$mty_id,
"tra_code" = stringi::stri_trans_totitle(tra$mty_individual_name),
"tra_description" = tra$mty_description,
"tra_wkg_code" = 'WGEEL',
"Tra_spe_code" = 'ANG',
"tra_uni_code" = tra$mty_uni_code,
"tra_typemetric"='Individual',
"tra_qualitativeornumeric"='Qualitative'
)


# the proportions will be numeric for group and qualitative for individual (
# e.g. evex presence)

traqal$tra_code <- gsub("\\s*_\\([^\\)]+\\)", "", traqal$tra_code)
traqal$tra_code[traqal$tra_code=="Is_female"] <- "Sex"
traqal$tra_individualname <- traqal$tra_code

# fix names

traqal$tra_description[traqal$tra_code=="Is_differentiated"] <- 'Is the eel differentiated (Y Yes, N No, NA Not applicable,P probable, U Unknown)'
traqal$tra_description[traqal$tra_code=="Sex"] <- 'Sex (F Female,H Hermaphordite,
I Immature attempt made,M Male, T Transitional, U Undetermined no attempt made, X Mixed)'
traqal$tra_description[traqal$tra_code=="Anguillicola_presence"] <- 'Presence of Anguillicola (Y Yes, N No, NA Not applicable,P probable, U Unknown)'
traqal$tra_description[traqal$tra_code=="Evex_presence"] <- 'EVE or EVEX presence (Y Yes, N No, NA Not applicable,P probable, U Unknown)'
traqal$tra_description[traqal$tra_code=="Hva_presence"] <- 'HVA presence (Y Yes, N No, NA Not applicable,P probable, U Unknown)'
# view(traqal)

dbWriteTable(con_diaspara_admin, "tr_traitqualitative_trq_temp", traqal, overwrite =TRUE)
dbExecute(con_diaspara_admin, "DELETE FROM refeel.tr_traitqualitative_trq");
dbExecute(con_diaspara_admin, "INSERT INTO refeel.tr_traitqualitative_trq(
tra_id,
tra_code,
tra_wkg_code,
tra_spe_code,
tra_description,
tra_typemetric,
tra_qualitativeornumeric)
SELECT 
tra_id,
tra_code,
'WGEEL',
'ANG',
tra_description,
tra_typemetric,
tra_qualitativeornumeric
 FROM tr_traitqualitative_trq_temp") #5
# TODO add group name


dbExecute(con_diaspara_admin, "INSERT INTO refeel.tr_traitqualitative_trq(
tra_id,
tra_code,
tra_wkg_code,
tra_spe_code,
tra_description,
tra_typemetric,
tra_qualitativeornumeric)
SELECT 
29,
'Pigment_stage',
'WGEEL',
'ANG',
'Pigmentation stage according to Elie, 1982',
'Individual',
'Qualitative'") 
# duplicated for variables which were both group and 
dbExecute(con_diaspara_admin, "UPDATE refeel.tr_traitqualitative_trq SET tra_id = 34 WHERE tra_code='Hva_presence';")
dbExecute(con_diaspara_admin, "UPDATE refeel.tr_traitqualitative_trq SET tra_id = 33 WHERE tra_code='Evex_presence';")
dbExecute(con_diaspara_admin, "UPDATE refeel.tr_traitqualitative_trq SET tra_id= 32 WHERE tra_code='Anguillicola_presence';")
dbExecute(con_diaspara_admin, "UPDATE refeel.tr_traitqualitative_trq SET tra_id= 31 WHERE tra_code='Is_differentiated'")
dbExecute(con_diaspara_admin, "UPDATE refeel.tr_traitqualitative_trq SET tra_id= 30 WHERE tra_code='Sex';")



```

## Values of Qualitative fish trait (tr_traitqualvalue_tva)

The qualitative traits have values

<details>

<summary>SQL code to create table `tr_traitqualvalue_tva` </summary>

``` {.sql include="../SQL/metric_08_ref_tr_traitqualvalue_tva.sql"}
```
</details>



```{r tbl-refeel_tr_traitvalueqal_tra}
#| echo: TRUE
#| eval: TRUE
#| warning: FALSE
#| message: FALSE
#| code-fold: TRUE
#| code-summary: Code to show trait table.
#| tbl-cap: Trait table ...

qal <- dbGetQuery(con_diaspara, "SELECT * FROM refeel.tr_traitvaluequal_qal;")
trq <- dbGetQuery(con_diaspara, "SELECT * FROM refeel.tr_traitqualitative_trq;")
#clipr::write_clip(colnames(qal))
trq <- data.frame(
  "qal_id"=1:(12+5*4+7),
  "qal_trq_code"=c(
    rep(trq$tra_code[1],12),
    rep(trq$tra_code[2],5),
    rep(trq$tra_code[3],5),
    rep(trq$tra_code[4],5),
    rep(trq$tra_code[5],5),
    rep(trq$tra_code[6],7))
  ,
  "qal_code"=c(c("VA","VB","VIA0","VIA1","VIA2","VIA3","VIA4","VIB", "mix_VIA1_VIA4",
   "mix_VA_VB", "U","NA"),
   rep(c("N","NA","U","Y","P"),4),
   c("F","I","M","T","U","X","H")),
  "qal_description" = c(
  "No pigmentation except a spot on the caudal fin",
  "Early development of the pigmentation on the skull, no superficial piment beyond the cerebral spot.",
  "Development of dorsal pigmentation along the base of dorsal fin",
  "The dosal pigmentation is complete from head to tail",
  "Presence of medio lateral pigmentation but it does not reach the beginning of the dorsal fin",
  "The medio-lateral pigmentation reaches the beginning of the dorsal fin",
  "Ventro lateral pigmentation distributed along the myosepta. Pigments are still distinct.",
  "Yellow eel, pigments are no longer distinct in the ventro lateral region",
  "Development of surface and branchiostegal pigmentation",
  "No or early pigmentation",
  "Glass eels, but pigmentation stage is unknown",
  "Not available",
  rep(c("NO","Not Applicable", "Unknown","Yes", "Probable"), 4),
  "Female", "Immature - attempt made but sex could not be destinguished",
  "Male", "Transitional", "Undetermined - no attempt made", "Mixed", "Hermaphrodite"
  ))
dbWriteTable(con_diaspara_admin, "tr_traitvaluequal_qal_temp", trq, overwrite =TRUE)
dbExecute(con_diaspara_admin, "DELETE FROM refeel.tr_traitvaluequal_qal");
dbExecute(con_diaspara_admin, "INSERT INTO refeel.tr_traitvaluequal_qal
SELECT 
qal_id,
qal_trq_code,
qal_code,
qal_description,
'WGEEL',
'ANG'
 FROM tr_traitvaluequal_qal_temp;") #39

```
## Fish trait measurement method

Currently in the wgeel database, the metrics table value contains one column for value which can store numeric or integer. When it is integer, then, the metric id (mty_id) refers either to a category (e.g sex, or is differenciated), or a method (sexed using size, sexed after gonadal inspection). 
In the new database, the method will be stored in a different column in the group or individual metrics. This table references the methods proposed.

<details>

<summary>SQL code to create tables</summary>

``` {.sql include="../SQL/metric_07_ref_tr_traitmethod_trm.sql"}
```

</details>


```{r ref_tr_traitmethod_trm_insert}
#| echo: TRUE
#| eval: FALSE
#| warning: FALSE
#| message: FALSE
#| code-fold: TRUE
#| code-summary: Code to import traitmethod table.

tra <- dbGetQuery(con_wgeel_local, "SELECT * FROM ref.tr_metrictype_mty ;")
tra <- tra[grepl("method", tra$mty_name),]
res <- dbGetQuery(con_diaspara, "SELECT * FROM ref.tr_traitmethod_trm")
clipr::write_clip(colnames(res))
traitmethod <- data.frame(
"trm_id" = 1:6,
"trm_tra_code"= c("Gonadal_inspection", "Length_based_sex", "Anguillicola_stereomicroscope_count", "Anguillicola visual count",
"Muscle_lipid_fatmeter", "Muscle_lipid_gravimeter"),
"trm_wkg_code" = rep('WGEEL', 6),
"trm_spe_code" = rep('ANG',6),
"trm_description" = c(
  "The eel is dissected and the gonads are inpected, In males, the testes  appear as thin, ribbon-like, whitish structures. In females, the ovaries are larger, lobed, and more granular, often yellowish or pinkish depending on maturity. Many eels pass through an intersexual phase (Here refered as Mixed to align with ICES Vocab), where gonads show both ovarian and testicular tissue. This is part of their natural development",
  "The size at silvering of eels depends on the sex. Males are found within the 25-45 cm range, and females are found over 45 cm. There is an overlap of sexes arround ",
  "Anguillicola count using a dissecting microscope, this allows to detect early-stage infections or small larvae",
  "Anguillicola visual count",
  "Non invasive estimation of the fat content by measuring the dielectric properties of tissues, this method requires a calibration.",
  "Gravimeter, muscle tissues are dried and the lipids are extracted using solvents, the extracted fat is dried and weighted")
)

dbWriteTable(con_diaspara_admin, "tr_traitmethod_trm_temp",traitmethod, overwrite =TRUE)
dbExecute(con_diaspara_admin, "INSERT INTO ref.tr_traitmethod_trm 
SELECT 
trm_id,
trm_tra_code,
trm_wkg_code,
trm_spe_code,
trm_description
 FROM tr_traitmethod_trm_temp") #6
```

```{r tbl-ref_tr_traitmethod_trm}
#| echo: TRUE
#| eval: TRUE
#| warning: FALSE
#| message: FALSE
#| code-fold: TRUE
#| code-summary: Code to show trait measurement method table.
#| tbl-cap: Trait table, check how this will be imported ...

trm <- dbGetQuery(con_diaspara, "SELECT * FROM ref.tr_traitmethod_trm;")
knitr::kable(trm) %>% kable_styling(bootstrap_options = c("striped", "hover", "condensed"))
```


## Creating the station table

Series will be linked to one or several stations.



The station are loaded into a table that will not be
exactly like ICES's since I cannot load the full tables, and don't want to replicate the full complexity of stations. For instance currently station 1000 has several parents for "Station_DTYPE" which I agregate like EW~EU~NU~CW,
 in my table. But the vocab is here.


<details>

<summary>SQL code to create tables</summary>

``` {.sql include="../SQL/metric_01_StationDictionary.sql"}
```

</details>


We have to do some fixes see (issue 27)[https://github.com/ices-tools-prod/icesVocab/issues/27] and remove nearly all the constraints, including the length of 50 for stationNames.
The following chunk creates a vocab with 14086 stations.


```{r ices_Station}
#| echo: TRUE
#| eval: FALSE
#| warning: FALSE
#| message: FALSE
#| code-fold: TRUE
#| code-summary: Code to import station

# tested 28/05/2025

library(icesStation)
system.time(
station <- getListStation())
user     system      spent
 #    268.09        9.06     1402.47 
save(station, file = "data/station.Rdata")
# load(file = "data/station.Rdata")
initcap <- function(X) paste0(substring(X,1,1),tolower(substring(X,2, length(X))))


station <- station[station$Station_Name != 'TestBulkUload1',]
station$Station_Deprecated<- initcap(as.character(station$Station_Deprecated))

dbWriteTable(con_diaspara_admin, "temp_station", station, overwrite = TRUE)
dbExecute(con_diaspara_admin,'DELETE FROM "ref"."StationDictionary"')
dbExecute(con_diaspara_admin,'INSERT INTO "ref"."StationDictionary"
("Definition", 
"HeaderRecord", 
"Station_Code",
 "Station_Country",
 "Station_Name",
 "Station_LongName", 
"Station_ActiveFromDate", 
"Station_ActiveUntilDate",
 "Station_ProgramGovernance",
 "Station_StationGovernance", 
"Station_PURPM",
 "Station_DataType",
 "Station_WLTYP",
 "Station_MSTAT", 
"Station_Notes", 
"Station_Deprecated")
SELECT
"Definition", 
"HeaderRecord", 
"Station_Code"::INTEGER,
 "Station_Country",
 "Station_Name",
 "Station_LongName", 
"Station_ActiveFromDate", 
"Station_ActiveUntilDate",
 "Station_ProgramGovernance",
 "Station_StationGovernance", 
"Station_PURPM",
 "Station_DataType",
 "Station_WLTYP",
 "Station_MSTAT", 
"Station_Notes", 
"Station_Deprecated" 
 FROM temp_station') #14086
 dbExecute(con_diaspara_admin, "DROP TABLE if exists temp_station")
  
```



```{r ices_Station}
#| echo: TRUE
#| eval: FALSE
#| warning: FALSE
#| message: FALSE
#| code-fold: TRUE
#| code-summary: Code to import station

# tested 28/05/2025

library(icesStation)
system.time(
station <- getListStation())
user     system      spent
 #    268.09        9.06     1402.47 
save(station, file = "data/station.Rdata")
# load(file = "data/station.Rdata")
initcap <- function(X) paste0(substring(X,1,1),tolower(substring(X,2, length(X))))


station <- station[station$Station_Name != 'TestBulkUload1',]
station$Station_Deprecated<- initcap(as.character(station$Station_Deprecated))

dbWriteTable(con_diaspara_admin, "temp_station", station, overwrite = TRUE)
dbExecute(con_diaspara_admin,'DELETE FROM "ref"."StationDictionary"')
dbExecute(con_diaspara_admin,'INSERT INTO "ref"."StationDictionary"
("Definition", 
"HeaderRecord", 
"Station_Code",
 "Station_Country",
 "Station_Name",
 "Station_LongName", 
"Station_ActiveFromDate", 
"Station_ActiveUntilDate",
 "Station_ProgramGovernance",
 "Station_StationGovernance", 
"Station_PURPM",
 "Station_DataType",
 "Station_WLTYP",
 "Station_MSTAT", 
"Station_Notes", 
"Station_Deprecated")
SELECT
"Definition", 
"HeaderRecord", 
"Station_Code"::INTEGER,
 "Station_Country",
 "Station_Name",
 "Station_LongName", 
"Station_ActiveFromDate", 
"Station_ActiveUntilDate",
 "Station_ProgramGovernance",
 "Station_StationGovernance", 
"Station_PURPM",
 "Station_DataType",
 "Station_WLTYP",
 "Station_MSTAT", 
"Station_Notes", 
"Station_Deprecated" 
 FROM temp_station') #14086
 dbExecute(con_diaspara_admin, "DROP TABLE if exists temp_station")
  
```
Note there is a table tr_station in wgeel but which was never really aligned with
ICES. So Probably all data providers will have to do their homework...

## Creating the version table refeel.tr_version_ver

<details>

<summary>SQL code to create tables</summary>

``` {.sql include="../SQL/metric_02_refeel_tr_version_ver.sql"}
```

</details>


This table is the same as in wgnas, it is inherited from ref.

```{r }
#| label: refeel_tr_version_ver_insert
#| echo: TRUE
#| eval: FALSE
#| warning: FALSE
#| message: FALSE
#| code-fold: TRUE
#| code-summary: Code to insert values into the tr_version_ver table


 
# get the latest version from the server
ver <- dbGetQuery(con_wgeel_distant, "select * from ref.tr_datasource_dts")
save(ver, file= "data/tr_datasource_dts.Rdata")
ver <- ver[ver$dts_datasource != 'test',]
dc <- ver[grepl("dc", ver$dts_datasource), "dts_datasource"]
dcyear <- as.integer(lapply(strsplit(dc,"_"), function(X)X[2]))
wgeel <- ver[grepl("wgeel", ver$dts_datasource), "dts_datasource"]
wgeelyear <- as.integer(lapply(strsplit(wgeel,"_"), function(X)X[2]))
tr_version_ver <- data.frame(
ver_code = paste0(rep("ANG-", 11),c(wgeelyear, dcyear, 2025),c("-1","-2",rep("-1", 9))),
ver_year = c(wgeelyear, dcyear, 2025),
ver_spe_code = "ANG",
ver_datacalldoi=c(rep(NA, 9), 
"https://doi.org/10.17895/ices.pub.25816738.v2",
"https://doi.org/10.17895/ices.pub.25816738.v2"), 
ver_stockkeylabel =c("ele"), # sugested by Hilaire. 
# TODO FIND other DOI (mail sent to ICES)
ver_version=c(1,2,rep(1,9)), # TODO WGNAS check that there is just one version per year
ver_description=ver$dts_description) # TODO WGNAS provide model description

DBI::dbWriteTable(con_diaspara_admin, "temp_tr_version_ver", tr_version_ver, 
overwrite = TRUE)
dbExecute(con_diaspara_admin, "INSERT INTO refeel.tr_version_ver SELECT * FROM temp_tr_version_ver;") # 5
 DBI::dbExecute(con_diaspara_admin, "DROP TABLE temp_tr_version_ver;")


# TODO eel and wgbast
#"ele.2737.nea","sal.27.22â31",

```


```{r}
#| label: tbl-version-refeel
#| echo: FALSE
#| eval: TRUE
#| warning: FALSE
#| message: FALSE
#| tbl-cap: Version

dbGetQuery(con_diaspara, "SELECT * FROM refeel.tr_version_ver;")%>% knitr::kable() %>% kable_styling(bootstrap_options = c("striped", "hover", "condensed"))

```

## series table t_series_ser




## Creating series main table dat.t_series_ser


<details>

<summary>SQL code to create tables</summary>

``` {.sql include="../SQL/metric_10_dat_t_series_ser.sql"}
```

</details>

This table is inherited so the table created in dat will be empty, and will
only receive data by inheritance. It can be considered as a view for ICES (no 
inheritance in SQL server).

Since this table is inherited the wkg needs to be included. One table will be created
per working group. These tables will be collated together.
Most details information about metadata will be in the metadata tables, either
to describe annual sampling or to describe individual metric collection.

Monitoring stations (including fixed stations) that are used for recurring sampling or data collection are managed via the Station Code Request Application in ICES [@ices_vocab_2024].
This table will reference monitoring station but it might be NULL, as some sampling 
designs or data collection, for instance for the DCF, are not related to a station.


:::::: questionbox
:::: questionbox-header
::: questionbox-icon
:::

QUESTION ICES (CÃ©dric via Teams meeting)
::::

::: questionbox-body
The ser_id might in some cases correspond to a fixed station but not only. For this reason 
the station is referenced here but another code will be created to reference the
sampling collection. Is this OK ?
:::
::::::


:::::: answerbox
:::: answerbox-header
::: answerbox-icon
:::

ANSWER ICES : Maria (20/05/2025)
::::

::: answerbox-body
Yes this makes sense,  I would advise 
to use both the stations and a unique identifier at the top. Using UUID will help
unicity there. It's not clear if it needs to 
be a vocabulary. 
There is a procedure to integrate stations, but for this we will probably do a bulk import.
:::
::::::

:::{.callout-note appearance="simple"}
## QUESTION to DIASPARA
I this that many of our series, and many of BAST or NAS would be related to fishways.
Shouldn't we need a fishway / fishway monitoring device vocab there ?
:::

:::{.callout-note appearance="simple"}
## QUESTION to WKEELDATA
Currently everything is in the same table, but it could be split by period
following exactly the station work. 
A description would then spans a limited amount of year from
date_begin to date_end. If the series description still hold the date_end is null.
If so we need to decide what fields could change over time (if any)
:::


## Creating inherited table dateel.t_series_ser


<details>

<summary>SQL code to create tables</summary>

``` {.sql include="../SQL/metric_11_dateel_t_series_ser.sql"}
```

</details>


## Import t_series_ser from wgeel

```{r refeel.t_series_ser_import}
#| echo: TRUE
#| eval: FALSE
#| warning: FALSE
#| message: FALSE
#| code-fold: TRUE
#| code-summary: Code to import to to refeel.tr_series_ser

res <- dbGetQuery(con_diaspara, "SELECT * FROM dateel.t_series_ser")
clipr::write_clip(colnames(res))

# temporarily remove area constraint

dbExecute(con_diaspara_admin, "ALTER TABLE dateel.t_series_ser drop constraint 
fk_ser_are_code")
dbExecute(con_diaspara_admin, "ALTER TABLE dateel.t_series_ser ALTER COLUMN  
ser_are_code DROP NOT NULL")
dbExecute(con_diaspara_admin, "ALTER TABLE dateel.t_series_ser ALTER COLUMN  
ser_cou_code DROP NOT NULL")
dbExecute(con_diaspara_admin, "ALTER TABLE dateel.t_series_ser DROP CONSTRAINT uk_ser_name")

t_series_ser <-
  data.frame(
   "ser_id" = uuid::UUIDgenerate(n=nrow(ser)),
   "ser_code" = ser$ser_nameshort,
    "ser_name"  = ser$ser_namelong,
   "ser_spe_code" = "ANG",
   "ser_lfs_code" = ser$ser_lfs_code,
   "ser_are_code" = ser$ser_emu_nameshort,
   "ser_wkg_code" = "WGEEL",
   "ser_ver_code" = case_when(ser$ser_dts_datasource =="dc_2019" ~ "ANG-2019-1",
                              ser$ser_dts_datasource =="dc_2021" ~ "ANG-2021-1",
                              ser$ser_dts_datasource =="dc_2022" ~ "ANG-2022-1",
                              ser$ser_dts_datasource =="dc_2023" ~ "ANG-2023-1",
                              ser$ser_dts_datasource =="dc_2024" ~ "ANG-2024-1",
                              .default = "ANG-2018-1"),
   "ser_cou_code" = ser$ser_cou_code,
   "ser_hab_code" = NA,
   "ser_gea_code" = ser$gea_issscfg_code,
   "ser_fiw_code" = NA,
   "ser_mon_code" = NA,
   "ser_uni_code" = ser$ser_uni_code,
   "ser_effort_uni_code" = ser$ser_effort_uni_code,
   "ser_description" = ser$ser_comment,
    "ser_locationdescription" = ser$ser_locationdescription,
    "ser_wltyp_code" = case_when(ser$ser_hty_code == "T" ~ "T",
                                 ser$ser_hty_code == "C" ~ "MC",
                                 ser$ser_hty_code == "F" ~ "FW",
                                 ser$ser_hty_code == "MO" ~ "MO"),
    "ser_stocking" = ser$ser_restocking,
    "ser_stockingcomment" = NA,
    "ser_protocol" = ser$ser_method,
    "ser_samplingstrategy" = NA,
    "ser_datarightsholder" = NA,
    "ser_datelastupdate" = '2025-06-09',
    "geom" = ser$geom    
  )

res <- dbWriteTable(con_diaspara_admin, "t_series_ser_temp", 
                    t_series_ser, overwrite = TRUE)
dbExecute(con_diaspara_admin, "DELETE FROM  dateel.t_series_ser;")
dbExecute(con_diaspara_admin, "INSERT INTO dateel.t_series_ser 
SELECT 
 ser_id::uuid,
 ser_code,
 ser_name,
 ser_spe_code,
 ser_lfs_code,
 ser_are_code,
 ser_wkg_code,
 ser_ver_code,
 ser_cou_code,
 ser_hab_code,
 ser_gea_code,
 ser_fiw_code,
 ser_mon_code,
 ser_uni_code,
 ser_effort_uni_code,
 ser_description,
 ser_locationdescription,
 ser_wltyp_code,
 ser_stocking,
 ser_stockingcomment,
 ser_protocol,
 ser_samplingstrategy,
 ser_datarightsholder,
 ser_datelastupdate::date,
 geom
FROM t_series_ser_temp") # 294 

sai <- dbGetQuery(con_wgeel_distant, "SELECT sai.* FROM datawg.t_samplinginfo_sai sai;
")

t_series_ser2 <-
  data.frame(
   "ser_id" = uuid::UUIDgenerate(n=nrow(sai)),
   "ser_code" = sai$sai_id,
    "ser_name"  = sai$sai_name,
   "ser_spe_code" = "ANG",
   "ser_lfs_code" = NA,
   "ser_are_code" = NA, # TODO sai_emu_nameshort sai_area_division
   "ser_wkg_code" = "WGEEL",
   "ser_ver_code" = case_when(sai$sai_dts_datasource =="dc_2019" ~ "WGEEL-2019-1",
                              sai$sai_dts_datasource =="dc_2021" ~ "WGEEL-2021-1",
                              sai$sai_dts_datasource =="dc_2022" ~ "WGEEL-2022-1",
                              sai$sai_dts_datasource =="dc_2023" ~ "WGEEL-2023-1",
                              sai$sai_dts_datasource =="dc_2024" ~ "WGEEL-2024-1",
                              .default = "WGEEL-2018-1"),
   "ser_cou_code" = sai$sai_cou_code,
   "ser_hab_code" = NA,
   "ser_gea_code" = NA,
   "ser_fiw_code" = NA,
   "ser_mon_code" = NA,
   "ser_uni_code" = NA,
   "ser_effort_uni_code" = NA,
   "ser_description" = sai$sai_comment,
    "ser_locationdescription" = NA,
    "ser_wltyp_code" = case_when(sai$sai_hty_code == "T" ~ "T",
                                 sai$sai_hty_code == "C" ~ "MC",
                                 sai$sai_hty_code == "F" ~ "FW",
                                 sai$sai_hty_code == "MO" ~ "MO"),
    "ser_stocking" = NA,
    "ser_stockingcomment" = NA,
    "ser_protocol" = sai$sai_protocol,
    "ser_samplingstrategy" = sai$sai_samplingstrategy,
    "ser_datarightsholder" = NA,
    "ser_datelastupdate" = sai$sai_lastupdate,
    "geom" = NA # no geom in this table  
  )

res <- dbWriteTable(con_diaspara_admin, "t_series_ser_temp2", 
                    t_series_ser2, overwrite = TRUE)
dbExecute(con_diaspara_admin, "INSERT INTO dateel.t_series_ser 
SELECT 
 ser_id::uuid,
 ser_code,
 ser_name,
 ser_spe_code,
 ser_lfs_code,
 ser_are_code,
 ser_wkg_code,
 ser_ver_code,
 ser_cou_code,
 ser_hab_code,
 ser_gea_code,
 ser_fiw_code,
 ser_mon_code,
 ser_uni_code,
 ser_effort_uni_code,
 ser_description,
 ser_locationdescription,
 ser_wltyp_code,
 ser_stocking,
 ser_stockingcomment,
 ser_protocol,
 ser_samplingstrategy,
 ser_datarightsholder,
 ser_datelastupdate::date,
 NULL
FROM t_series_ser_temp2") # 252 

```

## Creating  table dat.t_serannual_san


<details>

<summary>SQL code to create tables</summary>

``` {.sql include="../SQL/metric_20_dat_t_serannual_san.sql"}
```

</details>


## Creating inherited table dateel.t_seriesannual_san


<details>

<summary>SQL code to create tables</summary>

``` {.sql include="../SQL/metric_21_dateel_t_serannual_san.sql"}
```

</details>


## Import dateel.t_serannual_ser from datawg.t_dataseries_das WGEEL


```{r dateel.t_serannual_ser}
#| echo: TRUE
#| eval: FALSE
#| warning: FALSE
#| message: FALSE
#| code-fold: TRUE
#| code-summary: Code to import to refeel.t_serannual_ser

das0 <- dbGetQuery(con_wgeel_distant, "SELECT * FROM datawg.t_dataseries_das;
")

res <- dbGetQuery(con_diaspara, "SELECT * FROM dateel.t_serannual_san")
clipr::write_clip(colnames(res))

das0$das_dts_datasource[is.na(das0$das_dts_datasource)] <- "WGEEL-2016"
das0$das_dts_datasource <- paste0(gsub(pattern = "dc_", replacement = "WGEEL-", x= das0$das_dts_datasource), "-1")
das0$das_qal_id[is.na(das0$das_qal_id)] <- 1

nrow(das0) # 6523
das0 <- das0 |> filter(das0$das_qal_id <5)
nrow(das0) # 6402

ser <-  dbGetQuery(con_diaspara, "SELECT ser_id, ser_code FROM dateel.t_series_ser")
ser0 <- dbGetQuery(con_wgeel_distant, "SELECT ser_id, ser_nameshort as ser_code FROM datawg.t_series_ser ser;")

# adding ser_code to the series.
das <- das0 |> rename(ser_id = das_ser_id) |>
  inner_join(ser0) |> select(-ser_id) |> 
  inner_join(ser)
nrow(das) #6523

t_serannual_san_temp <-
  data.frame(
    "san_ser_id" = das$ser_id,
    "san_id" = das$das_id,
    "san_value"=das$das_value,
    "san_year" = das$das_year,
    "san_comment" = das$das_comment,
    "san_effort" = das$das_effort,
    "san_datelastupdate" = das$das_last_update,
    "san_qal_id" = das$das_qal_id,
    "san_qal_comment" = das$das_qal_comment,
    "san_wkg_code" = "WGEEL",
    "san_ver_code" = das$das_dts_datasource)


res <- dbWriteTable(con_diaspara_admin, "t_serannual_san_temp", 
                    t_serannual_san_temp, overwrite = TRUE)
dbExecute(con_diaspara_admin, "DELETE FROM  dateel.t_serannual_san;")
dbExecute(con_diaspara_admin, "INSERT INTO dateel.t_serannual_san 
SELECT 
    san_ser_id::uuid,
    san_id,
    san_value,
    san_year,
    san_comment,
    san_effort,
    san_datelastupdate,
    san_qal_id,
    san_qal_comment,
    san_wkg_code,
    san_ver_code 
FROM t_serannual_san_temp") # 6402



 

``` 



## Creating table dat.tj_seriesstation_ses


<details>

<summary>SQL code to create tables</summary>

``` {.sql include="../SQL/metric_12_dat.tj_seriesstation_ses.sql"}
```

</details>


## Creating inherited table dateel.tj_seriesstation_ses


<details>

<summary>SQL code to create tables</summary>

``` {.sql include="../SQL/metric_13_dateel.tj_seriesstation_ses.sql"}
```

</details>

# Creating one table that will only be in wgeel datasets (for stock annex)

## Creating table dateel.t_recruitmentmetadata_met

The code was developped during [WKEELDATA6](https://doi.org/10.17895/ices.pub.29290463)
Currently the table is not intended to be held in the db
There is still work to be done on the area referential for eel (starting summer 2025).
Some referentials are coming from the old db (emu, sampling type), and 
are currently not transfered.


<details>

<summary>SQL code to create tables</summary>

``` {.sql include="../SQL/metric_14_dateel_t_recruitmentmetadata_met.sql"}
```

</details>




# Creating group metrics

## Create group table


<details>

<summary>SQL code to create tables</summary>

``` {.sql include="../SQL/metric_22_dat_t_group_gr.sql"}
```

</details>

## Create group table for dateel

<details>

<summary>SQL code to create tables</summary>

``` {.sql include="../SQL/metric_23_dateel_t_group_gr.sql"}
```

</details>


## Create table 


## Creating ind metrics (TODO)

[TODO] 

# Import data from WGEEL (TODO)

[TODO] Link the ccm wso_id to the hydroshed db identifiers of the basins to get the best fit from tr_area_are.
[git issue #25 Import data from WGEEL](https://github.com/DIASPARAproject/WP3_migdb/issues/23)

The release date for that one is :

[Milestone release alpha](https://github.com/DIASPARAproject/WP3_migdb/milestone/5)

So the metric release will be after wgeel, but hopefully some of the work will be started and this can be discussed during wgeel.

# Import data from WP2 (TODO)


# Import to ICES



# Acknowledgements

