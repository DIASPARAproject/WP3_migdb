---
title: "WGNAS database description"
subtitle: "DIASPARA working document"
author: "Briand CÃ©dric, Oliviero Jules, Helminen Jani"
date: last-modified
date-format: "DD-MM-YYYY"
description: "Technical analysis of the salmoglob database"
title-block-banner: "images/diaspara_bandeau.png"
title-block-banner-color: "white"
format:
 html:
  self-contained: true
  theme: cosmo
  smooth-scroll: true
  fontcolor: black
  toc: true
  toc-location: left
  toc-title: Summary
  toc-depth: 3
reference-location: document
bibliography: diaspara.bib
---



[@ices_second_2024]

```{r init}
#| echo: FALSE
#| warning: FALSE
#| message: FALSE
#| results: 'hide'

#if (!grepl("montepomi", getwd())) {
if(Sys.info()[["user"]] == 'joliviero'){
setwd("D:/workspace/DIASPARA_WP3_migdb/R")
} else if (Sys.info()[["user"]] == 'cedric.briand'){
setwd("C:/workspace/DIASPARA_WP3_migdb/R")
}
source("utilities/load_library.R")
load_library("RPostgres")
load_library("sf")
load_library("getPass")
load_library("readxl")
load_library("flextable")
load_library("tidyverse")
load_library("yaml")
load_library("DBI")
load_library("knitr")
load_library("kableExtra")
cred=read_yaml("../credentials.yml")
con_salmoglob = dbConnect(Postgres(), dbname=cred$dbnamesalmo,host=cred$host,port=cred$port,user=cred$usersalmo, password=cred$passwordsalmo)
```

# Main database structure

```{r databasedescription}
#| echo: FALSE
#| eval: TRUE
#| warning: FALSE
#| message: FALSE
#| tbl-cap: 'Structure of the main database'

database <- DBI::dbGetQuery(con_salmoglob, 'SELECT * FROM public.database limit 20')
knitr::kable(database) %>% kable_styling(bootstrap_options = c("striped","hover", "condensed"))
```

# Area


![phylogeographic structuring observed across studies in Atlantic salmon resolved by screening of phylogenetically informative nuclear microsatellite and SNP variation](images/phylogeographic_structuring_salmon.png)


```{r area}
#| echo: FALSE
#| eval: TRUE
#| warning: FALSE
#| message: FALSE
area <- DBI::dbGetQuery(con_salmoglob, 'SELECT DISTINCT area FROM public.database')
knitr::kable(area[grep("fishery",area$area),,drop=FALSE], caption = "Area corresponding to fisheries", row.names=FALSE)
knitr::kable(area[grep("coun",area$area),,drop=FALSE], caption = "Area corresponding to countries", row.names=FALSE)
knitr::kable(area[!grepl("coun",area$area) & !grepl("fishery",area$area),,drop=FALSE], caption = "Area corresponding to source area", row.names=FALSE)
```

The latter table is by default, so Atlantic, NEC and NAC are included. Having a label in a reference table and a geom to associate to those labels would be I guess very usefull.

# Location


```{r location}
#| echo: FALSE
#| eval: TRUE
#| warning: FALSE
#| message: FALSE
location <- DBI::dbGetQuery(con_salmoglob, 'SELECT DISTINCT location FROM public.database')
knitr::kable(location[grep("fishe",tolower(location$location)),,drop=FALSE], caption = "Location corresponding to fisheries", row.names=FALSE)
location_biz <- data.frame("location"=setdiff(location[!grepl("fishe",tolower(location$location)),],
  area[!grepl("coun",area$area) & !grepl("fishery",area$area),]))
knitr::kable(location_biz, caption = "These one are neither fishery nor area, can we simplify at parameter level", row.names=FALSE)  
location_area <- data.frame("location"=intersect(location[!grepl("fishe",location$location),],
  area[!grepl("coun",area$area) & !grepl("fishery",area$area),]))
knitr::kable(location_area, caption = "Location corresponding exactly to what is aleardy in area", row.names=FALSE)
```


list of params corresponding to neither fishery nor area.


```{r param_biz}
#| echo: FALSE
#| eval: TRUE
#| warning: FALSE
#| message: FALSE
#| results: 'asis'

for (i in 1 : nrow(location_biz)){
  location_bizi <- location_biz$location[i]
  var_biz <- DBI::dbGetQuery(con_salmoglob, glue::glue_sql("SELECT distinct(var_mod) FROM public.database 
where location in ({location_bizi})", .con=con_salmoglob))
colnames(var_biz) <- location_bizi
print(kable(var_biz[,,drop=FALSE], row.names=FALSE))
}
```

``` {r db_comparaison}
#| echo: FALSE
#| eval: TRUE
#| warning: FALSE
#| message: FALSE

database <- DBI::dbGetQuery(con_salmoglob, "SELECT * FROM public.database")
database_archive <- DBI::dbGetQuery(con_salmoglob, "SELECT * FROM public.database_archive")

# List of commun columns
cols <- c("version", "year", "type", "age", "area", "location", "metric", "var_mod")

# getting values that are not present in database anymore
for (col in cols) {
  diff_values <- setdiff(database_archive[[col]], database[[col]])
  if (length(diff_values) > 0) {
    cat("Values present in database_archive but not in database for", col, "column :\n")
    print(diff_values)
  }
}
```



``` {r check_parameter_location}
#| echo: FALSE
#| eval: TRUE
#| warning: FALSE
#| message: FALSE


result <- database %>%
  group_by(var_mod) %>%
  summarise(location_count = n_distinct(location))
knitr::kable(result, caption = "Number of locations per var_mod") %>% kable_styling(bootstrap_options = c("striped", "hover", "condensed"))
```

So in the end, only omega has 25 locations, and in this case the location corresponds to area.
This means we can get rid of the location column. For omega we can keep it,; so we can add a column with a foreign key to area in the parameters table where priors will be stored.

## hierarchical structure of the database

The database could start with the simplest structure, with a basic table corresponding to all data. 
Then three tables could be created, one per species. This is to allow querying the different tables independently. From these species tables, three different tables could be produced, one for data, one for parameters outputs, one for parameters priors.
The tables could have a different format, meaning maybe parameter does not have stage (only if this simplifies further development). Data should have stage because eel data need stage. The stage can be easily pulled up with a joining of the metadata table.


From these three table on could envisage the creation of specific table for working groups. Meaning one table for eel (wgeel), one table for salmon (wgnas), one table for salmon (wgbast), and one table for trutta (wgtrutta).

## referential tables

Similarly, referential tables could be created with a mother table from which specific (or wg specific) tables would inherit. This would make the setting up of consistent foreign key more easy. For instance wgbast could reference different age class than wgnas, and the stage would be completely different between wgeel and wgnas reference daughter tables. Some of these referential table would be common between species (e.g. source from ICES vocab, which corresponds to working group or accession events (datacalls)).

## unicity constraints

Another important point to add (at least to the salmoglob database) is unicity constraint. As some values would be null, creating unicity constraints with indexes would be necessary. These allow to have different levels of constraints for instance the unicity would be defined for :
(year, age, area, parameter)
(year, age, parameter)
(year, area, parameter)
(year, parameter)

One of the table will have to contain twice the area it will have to be treated separately.
(year, area, area,  parameter)


## Other comments.

Currently stage in metadata not consistent, replicates information about maturity but not always. The lack of consistency in the metadata is not a problem as this table refers to the model. 

Additional values about maturity, stage, can be stored in the metadata table.

There is a discrepancy between data in the historical dataset and the current, so we need to create additional parameters for the historical database and this will need to be checked.

``` {r conmigdb}
#| echo: FALSE
#| eval: FALSE

con_diaspara = dbConnect(Postgres(), dbname=cred$dbnamediaspara,host=cred$host,port=cred$port,user=cred$userdiaspara, password=cred$passworddiaspara)
```

<!-- 

```{sql create_referentials}
--| connection: con_diaspara
--| echo: TRUE
--| eva: FALSE

-- CREATE REFERENTIAL TABLES

/*
This is a comment
*/
DROP schema if exists "ref";
CREATE schema "ref";
GRANT ALL PRIVILEGES ON SCHEMA "ref" TO diaspara_admin ;
GRANT ALL PRIVILEGES ON SCHEMA public TO diaspara_read ;
GRANT CONNECT ON DATABASE "diaspara" TO diaspara_read;
ALTER DATABASE "diaspara" OWNER TO diaspara_admin;

-- edit pg_hba.conf on the server


-- TODO search countries for Salmon US
CREATE TABLE ref.tr_country_cou (
    cou_code character varying(2) NOT NULL,
    cou_country text NOT NULL,
    cou_order integer NOT NULL,
    geom public.geometry,
    cou_iso3code character varying(3)
);
-- how to inegrate with hierarchical level in salmodb ? Same for eel ?

ALTER TABLE ref.tr_country_cou OWNER TO postgres;
GRANT ALL ON SCHEMA ref diaspara_admin;
CREATE ROLE diaspara_read

CREATE TABLE "ref".tr_pararmeter_parm (
  parm_id serial4 NOT NULL,
  parm_name TEXT NOT NULL UNIQUE,
  parm_species TEXT
  parm_description text NULL,
  parm_uni_code varchar(20) NULL,
  CONSTRAINT parm_pkey PRIMARY KEY (typ_id),
  CONSTRAINT c_fk_parm_uni_code FOREIGN KEY (typ_uni_code) REFERENCES "ref".tr_units_uni(uni_code) ON UPDATE CASCADE
);


``` -->